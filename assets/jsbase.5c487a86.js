import{_ as n}from"./LinkItem.c8df38c8.js";import{_ as s}from"./app.1e82055a.js";import{h as a,o as t,a as o,w as e,b as c,k as p}from"./vendor.5a394a79.js";const l=c("p",null,"本文记录现代 Javascript 的一些学习笔记，从头到尾的全面学习下 javascript。 从文档上看，这个教程的质量和细节部分还是挺多的。记录的内容大多是我没有接触过，或者比较模糊的部分。",-1),u=c("h3",{id:"空值合并运算符"},[c("a",{class:"header-anchor",href:"#空值合并运算符","aria-hidden":"true"},"#"),p(" 空值合并运算符")],-1),k=c("p",null,[c("code",null,"??"),p(" 是用于在值为 "),c("code",null,"null/undefined"),p(" 这两个情况下返回第一个已经定义的值。 这个比 "),c("code",null,"||"),p(" 行为不同的是：它对 "),c("code",null,'0/""'),p(" 等这些情况会认为是已定义的。 "),c("code",null,"??"),p(" 的优先级非常低，需要注意使用括号。")],-1),r=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" firstName "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"null"),p("\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" secondname "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token string"},"''"),p("\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" c "),c("span",{class:"token operator"},"="),p(" secondname "),c("span",{class:"token operator"},"??"),p(),c("span",{class:"token string"},"'me?'"),p("\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(" c\n"),c("span",{class:"token string"},"''"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" d "),c("span",{class:"token operator"},"="),p(" firstName "),c("span",{class:"token operator"},"??"),p(),c("span",{class:"token string"},"'me!'"),p("\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(" d\n"),c("span",{class:"token string"},"'me!'"),p("\n"),c("span",{class:"token operator"},">"),p("\n")])],-1),i=c("p",null,"同时可以通过多个串起来使用：",-1),d=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" d "),c("span",{class:"token operator"},"="),p(" firstName "),c("span",{class:"token operator"},"??"),p(),c("span",{class:"token string"},"'me!'"),p("\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(" d\n"),c("span",{class:"token string"},"'me!'"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" e"),c("span",{class:"token operator"},"="),c("span",{class:"token keyword"},"null"),p("\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" g "),c("span",{class:"token operator"},"="),p(" e "),c("span",{class:"token operator"},"??"),p(" firstName "),c("span",{class:"token operator"},"??"),p(" secondname "),c("span",{class:"token operator"},"??"),p(" d\n"),c("span",{class:"token keyword"},"undefined"),p("\n"),c("span",{class:"token operator"},">"),p(" g\n"),c("span",{class:"token string"},"''"),p("\n"),c("span",{class:"token operator"},">"),p("\n")])],-1),m=c("p",null,[p("这边就会返回 "),c("code",null,"secondname"),p(" 这个非空的值。")],-1),g=c("h3",{id:"函数"},[c("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),p(" 函数")],-1),y=c("ul",null,[c("li",null,[p("不要在 "),c("code",null,"return"),p(" 与返回值之间添加新行，这会导致 return 变成单行指令，返回空置；")])],-1),h=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token comment"},"// bad case"),p("\n"),c("span",{class:"token keyword"},"return"),p("   "),c("span",{class:"token comment"},"// will be treat as return;"),p("\n  "),c("span",{class:"token punctuation"},"("),p("a "),c("span",{class:"token operator"},"+"),p(" b"),c("span",{class:"token punctuation"},")"),p("\n\n"),c("span",{class:"token comment"},"// optimized"),p("\n"),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token punctuation"},"("),p("\n    a "),c("span",{class:"token operator"},"+"),p(" b\n"),c("span",{class:"token punctuation"},")"),p("\n")])],-1),f=c("ul",null,[c("li",null,[p("函数表达式后尽量增加一个 "),c("code",null,";")])],-1),b=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token function-variable function"},"add"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[p("a"),c("span",{class:"token punctuation"},","),p(" b")]),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"return"),p(" a "),c("span",{class:"token operator"},"+"),p(" b"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n")])],-1),w=c("p",null,"函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。",-1),j=c("h3",{id:"代码质量"},[c("a",{class:"header-anchor",href:"#代码质量","aria-hidden":"true"},"#"),p(" 代码质量")],-1),v=c("ul",null,[c("li",null,[c("code",null,"debugger;"),p(" 单独的语句会让调试器在此暂停住，并且不会执行下一条语句。")]),c("li",null,"当处于调试模式时，在代码中的某一行上右键，在显示的关联菜单（context menu）中点击一个非常有用的名为 “Continue to here” 的选项。")],-1),S=p(" Chrome dev tool 的相关文档 "),O=c("h3",{id:"文档注释"},[c("a",{class:"header-anchor",href:"#文档注释","aria-hidden":"true"},"#"),p(" 文档注释")],-1),J=p(" 用于注释 js 函数的一个中格式，搭配工具可以生成 html 的文档 "),N=p(" 用于自动生成 js 注释文档的工具 "),x=c("h3",{id:"语言规范"},[c("a",{class:"header-anchor",href:"#语言规范","aria-hidden":"true"},"#"),p(" 语言规范")],-1),M=p("查看语言特性的当前支持状态"),D=c("h3",{id:"object"},[c("a",{class:"header-anchor",href:"#object","aria-hidden":"true"},"#"),p(" Object")],-1),I=c("ul",null,[c("li",null,"多单词的 key 需要使用引号包裹")],-1),T=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" obj "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n    a"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p("\n    b"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p("\n    "),c("span",{class:"token string"},'"hello world"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("obj"),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},"'hello world'"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 3"),p("\nkey"),c("span",{class:"token operator"},"="),c("span",{class:"token string"},"'hello world'"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("obj"),c("span",{class:"token punctuation"},"["),p("key"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 3"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("obj"),c("span",{class:"token punctuation"},"."),p("key"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// undefined"),p("\n")])],-1),P=c("ul",null,[c("li",null,"当数字 0 被用作对象的属性的键时，会被转换为字符串 “0”"),c("li",null,"整数属性会被排序，其他的属性会按照创建的顺序排序")],-1),_=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" codes "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token string"},'"49"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"Germany"'),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token string"},'"41"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"Switzerland"'),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token string"},'"44"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"Great Britain"'),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token comment"},"// ..,"),p("\n  "),c("span",{class:"token string"},'"1"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"USA"'),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token keyword"},"for"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"let"),p(" code "),c("span",{class:"token keyword"},"in"),p(" codes"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token function"},"alert"),c("span",{class:"token punctuation"},"("),p("code"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// 1, 41, 44, 49"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n")])],-1),A=c("ul",null,[c("li",null,[c("p",null,"使用 const 声明的对象也是可以被修改的")]),c("li",null,[c("p",null,"Object.assign 来做所谓的“浅拷贝”, 因为嵌套的对象同样存在引用")])],-1),C=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"const"),p(" abc "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),c("span",{class:"token string"},"'a'"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'c'"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"{"),c("span",{class:"token string"},"'d'"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token operator"},">"),p(" abc\n"),c("span",{class:"token punctuation"},"{"),p(" a"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(" c"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"{"),p(" d"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),p(),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token operator"},">"),p(" abcd "),c("span",{class:"token operator"},"="),p(" Object"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"assign"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[c("span",{class:"token punctuation"},"{"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(" abc")]),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"{"),p(" a"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(" c"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"{"),p(" d"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),p(),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token operator"},">"),p(" abcd"),c("span",{class:"token punctuation"},"."),p("c"),c("span",{class:"token punctuation"},"."),p("d"),c("span",{class:"token operator"},"="),c("span",{class:"token number"},"4"),p("\n"),c("span",{class:"token number"},"4"),p("\n"),c("span",{class:"token operator"},">"),p(" abc\n"),c("span",{class:"token punctuation"},"{"),p(" a"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(" c"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"{"),p(" d"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"4"),p(),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token operator"},">"),p("\n")])],-1),Y=c("h3",{id:"构造函数"},[c("a",{class:"header-anchor",href:"#构造函数","aria-hidden":"true"},"#"),p(" 构造函数")],-1),F=c("p",null,"常规来说，它们也是普通的函数，不过有如下的规定：",-1),q=c("ul",null,[c("li",null,"它们的命名以大写字母开头。"),c("li",null,"它们只能由 “new” 操作符来执行。")],-1),z=c("p",null,[p("JS 中形如 "),c("code",null,"Date"),p(" 或者 "),c("code",null,"Set"),p(" 等等的构造函数，都需要使用 "),c("code",null,"new"),p(" 操作符来创建。 通常，构造器没有 return 语句。它们的任务是将所有必要的东西写入 this，并自动转换为结果。但是，如果这有一个 return 语句，那么规则就简单了：")],-1),H=c("pre",{class:"language-bash"},[c("code",{class:"language-bash"},[p("+ 如果 "),c("span",{class:"token builtin class-name"},"return"),p(" 返回的是一个对象，则返回这个对象，而不是 this。\n+ 如果 "),c("span",{class:"token builtin class-name"},"return"),p(" 返回的是一个原始类型，则忽略。\n")])],-1),$=c("p",null,"一个例子：",-1),E=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"Person"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"name"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("name "),c("span",{class:"token operator"},"="),p(" name"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token punctuation"},"{"),c("span",{class:"token string"},'"newname"'),p(),c("span",{class:"token operator"},":"),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("name "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\np "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Person"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'John'"),c("span",{class:"token punctuation"},")"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("p"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// { newname: 'John' }"),p("\n\n"),c("span",{class:"token comment"},"// normal variable"),p("\n"),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"Person2"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"name"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("name "),c("span",{class:"token operator"},"="),p(" name"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token keyword"},"let"),p(" age "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"18"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token keyword"},"return"),p(" age"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\np2 "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Person2"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'John'"),c("span",{class:"token punctuation"},")"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("p2"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// { name: 'John' }"),p("\n")])],-1),L=c("h3",{id:"可选链"},[c("a",{class:"header-anchor",href:"#可选链","aria-hidden":"true"},"#"),p(" 可选链")],-1),R=c("p",null,[c("code",null,"?."),p(" 这个一般用在判断一个 object 的属性是否存在，如果存在，则返回这个属性的值，否则返回 undefined。 所谓的存在一般指的是这个属性是 "),c("code",null,"非 null/undefined"),p(" 的。")],-1),W=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[p("ret "),c("span",{class:"token operator"},"="),p(" a"),c("span",{class:"token operator"},"?."),p("b"),c("span",{class:"token operator"},"?."),p("c"),c("span",{class:"token operator"},"?."),p("d\n")])],-1),Z=c("p",null,[p("这可以省去大部分的重复判断代码。除此之外还有 "),c("code",null,"?.()"),p(" 和 "),c("code",null,"?.[]"),p(" 这两个变体。 这些是可以用于删除和读取的，但是不能用于写入。")],-1),G=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" userAdmin "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token function"},"admin"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token function"},"alert"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"I am admin"'),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token keyword"},"let"),p(" userGuest "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\nuserAdmin"),c("span",{class:"token punctuation"},"."),p("admin"),c("span",{class:"token operator"},"?."),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// I am admin"),p("\nuserGuest"),c("span",{class:"token punctuation"},"."),p("admin"),c("span",{class:"token operator"},"?."),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// 啥都没有（没有这样的方法）"),p("\n\n"),c("span",{class:"token comment"},"// 可选 key"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(" user "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"null"),p("\n\nuser"),c("span",{class:"token operator"},"?."),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},"'helloworld'"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token comment"},"// undefined"),p("\n"),c("span",{class:"token keyword"},"delete"),p(" user"),c("span",{class:"token operator"},"?."),p("key "),c("span",{class:"token comment"},"// 此处不存在key，所以不会删除，但不会报错"),p("\n\n")])],-1),U=c("p",null,[p("注意以上再不存在时均返回 "),c("code",null,"undefined"),p("。")],-1),B=c("h3",{id:"symbol"},[c("a",{class:"header-anchor",href:"#symbol","aria-hidden":"true"},"#"),p(" Symbol")],-1),K=c("p",null,[c("code",null,"Symbol"),p(" 表示唯一的标识符。可以用于在 object 中，作为 object 的属性名，但是它不会被转换成字符串，是属于独立的类型。 如果想要获取他的定义或者是值，使用如下：")],-1),Q=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" id "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token function"},"Symbol"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"id"'),c("span",{class:"token punctuation"},")"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("id"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"toString"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// Symbol(id)"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("id"),c("span",{class:"token punctuation"},"."),p("description"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// id"),p("\n")])],-1),V=c("p",null,"symbol 的隐藏属性可以让我们安全的在第三方的结构里面增加新的key。 比如：",-1),X=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" id "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token function"},"Symbol"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"id"'),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token keyword"},"let"),p(" user "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n    name"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"John"'),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\nuser"),c("span",{class:"token punctuation"},"["),p("id"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"123"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("usr"),c("span",{class:"token punctuation"},"["),p("id"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 123"),p("\n")])],-1),nn=c("ul",null,[c("li",null,[p("在 "),c("code",null,"for...in"),p(" 循环中，Symbol 属性会被忽略。")]),c("li",null,[p("在 "),c("code",null,"Object.keys()"),p(" 中，Symbol 属性会被忽略。")]),c("li",null,[p("在 "),c("code",null,"Object.assing()"),p(" 中，Symbol 属性会被复制。")])],-1),sn=c("h4",{id:"全局-symbol"},[c("a",{class:"header-anchor",href:"#全局-symbol","aria-hidden":"true"},"#"),p(" 全局 symbol")],-1),an=c("ul",null,[c("li",null,[p("使用 "),c("code",null,'Symbol.for("xxx")'),p(" 来获取全局 symbol。 如果不存在就创建一个新的。存在的就直接返回。")]),c("li",null,[p("使用 "),c("code",null,'Symbol.keyFor("xxx")'),p(" 来获取 symbol 的名字")])],-1),tn=c("blockquote",null,[c("p",null,"从技术上说，Symbol 不是 100% 隐藏的。有一个内建方法 Object.getOwnPropertySymbols(obj) 允许我们获取所有的 Symbol。还有一个名为 Reflect.ownKeys(obj) 的方法可以返回一个对象的 所有 键，包括 Symbol。所以它们并不是真正的隐藏。但是大多数库、内建方法和语法结构都没有使用这些方法。")],-1),on=c("h3",{id:"primitive"},[c("a",{class:"header-anchor",href:"#primitive","aria-hidden":"true"},"#"),p(" primitive")],-1),en=c("p",null,[p("可以使用 "),c("code",null,"Symbol.primitive"),p(" 的内建 symbol 用来转换方法命名，这个类似于将 object 变成可以处理不同场景下的情况。")],-1),cn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" user "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  name"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"John"'),c("span",{class:"token punctuation"},","),p("\n  money"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1000"),c("span",{class:"token punctuation"},","),p("\n\n  "),c("span",{class:"token punctuation"},"["),p("Symbol"),c("span",{class:"token punctuation"},"."),p("toPrimitive"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"hint"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token function"},"alert"),c("span",{class:"token punctuation"},"("),c("span",{class:"token template-string"},[c("span",{class:"token template-punctuation string"},"`"),c("span",{class:"token string"},"hint: "),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),p("hint"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token template-punctuation string"},"`")]),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token keyword"},"return"),p(" hint "),c("span",{class:"token operator"},"=="),p(),c("span",{class:"token string"},'"string"'),p(),c("span",{class:"token operator"},"?"),p(),c("span",{class:"token template-string"},[c("span",{class:"token template-punctuation string"},"`"),c("span",{class:"token string"},'{name: "'),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("name"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token string"},'"}'),c("span",{class:"token template-punctuation string"},"`")]),p(),c("span",{class:"token operator"},":"),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("money"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token function"},"alert"),c("span",{class:"token punctuation"},"("),p("user"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},'// hint: string -> {name: "John"}'),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token operator"},"+"),p("user"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// hint: number -> 1000"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("user "),c("span",{class:"token operator"},"+"),p(),c("span",{class:"token number"},"500"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// hint: default -> 1500"),p("\n")])],-1),pn=c("p",null,"默认情况下，普通对象具有 toString 和 valueOf 方法：",-1),ln=c("ul",null,[c("li",null,"toString 方法返回一个字符串 “[object Object]”。"),c("li",null,"valueOf 方法返回对象自身。")],-1),un=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" user "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("name"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"john"'),c("span",{class:"token punctuation"},"}"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("user"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"valueOf"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},'// {name: "john"}'),p("\n")])],-1),kn=c("p",null,[p("此时我们可以重写 "),c("code",null,"toString"),p(" 和 "),c("code",null,"valueOf"),p(" 方法")],-1),rn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" user "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  name"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"john"'),c("span",{class:"token punctuation"},","),p("\n  value"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"500"),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token function"},"toString"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token template-string"},[c("span",{class:"token template-punctuation string"},"`"),c("span",{class:"token string"},'{name: "'),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("name"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token string"},'"}'),c("span",{class:"token template-punctuation string"},"`")]),p("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token function"},"valueOf"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("value\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token function"},"alert"),c("span",{class:"token punctuation"},"("),p("user"),c("span",{class:"token punctuation"},")"),p("  "),c("span",{class:"token comment"},'// {name: "John"}'),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("user "),c("span",{class:"token operator"},"+"),p(),c("span",{class:"token number"},"500"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 1000"),p("\n\n")])],-1),dn=c("h3",{id:"数字类型"},[c("a",{class:"header-anchor",href:"#数字类型","aria-hidden":"true"},"#"),p(" 数字类型")],-1),mn=c("p",null,[c("code",null,"toString(base)"),p(" 返回当前数字以 base 形式的字符串。")],-1),gn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" number "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"100"),p("\n"),c("span",{class:"token number"},"100"),p("\n"),c("span",{class:"token operator"},">"),p(" number"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"toString"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token string"},"'1100100'"),p("\n"),c("span",{class:"token operator"},">"),p(" number"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"toString"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"16"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token string"},"'64'"),p("\n"),c("span",{class:"token operator"},">"),p("\n")])],-1),yn=c("p",null,[p("同样的当我们将字符串的数字变成数字时，"),c("code",null,"parseInt"),p(" 和 "),c("code",null,"parseFloat"),p(" 可以帮助我们。不过这 "),c("code",null,"parseInt"),p(" 拥有第二个参数，用来制定进制。")],-1),hn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" anumber "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token string"},"'100'"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token function"},"parseInt"),c("span",{class:"token punctuation"},"("),p("anumber"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 100"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token function"},"parseInt"),c("span",{class:"token punctuation"},"("),p("anumber"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 4, 将 100 看成是二进制的"),p("\n")])],-1),fn=c("h3",{id:"string"},[c("a",{class:"header-anchor",href:"#string","aria-hidden":"true"},"#"),p(" String")],-1),bn=c("p",null,[p("字符串的 "),c("code",null,"indexOf"),p(" 的返回值可以使用一个按位与的小技巧来判断。如下：")],-1),wn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" str "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token string"},'"hello world"'),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token keyword"},"if"),c("span",{class:"token punctuation"},"("),c("span",{class:"token operator"},"~"),p("str"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"indexOf"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"o"'),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"find it"'),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n")])],-1),jn=c("p",null,[c("code",null,"~"),p(" 就是按位取反， 所以 "),c("code",null,"~n"),p(" 等价于 "),c("code",null,"-(n+1)"),p("。 也就是说 "),c("code",null,"~-1"),p(" = 0。 0 在 js 中是表示 falsy 值的。 "),c("strong",null,"不过这个技巧不太建议使用"),p("，因为有一定的局限性，且我们可以使用 "),c("code",null,"includes"),p(" 来替代。")],-1),vn=c("p",null,"一些常用的方法的总结：",-1),Sn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},"|"),p(" 方法 ｜ 选择方式 ｜ 负数参数 "),c("span",{class:"token operator"},"|"),p("\n"),c("span",{class:"token operator"},"|"),p(),c("span",{class:"token operator"},"--"),c("span",{class:"token operator"},"--"),p(),c("span",{class:"token operator"},"|"),p(),c("span",{class:"token operator"},"--"),c("span",{class:"token operator"},"--"),p(),c("span",{class:"token operator"},"|"),p(),c("span",{class:"token operator"},"--"),c("span",{class:"token operator"},"--"),p(),c("span",{class:"token operator"},"|"),p("\n"),c("span",{class:"token operator"},"|"),p(),c("span",{class:"token function"},"slice"),c("span",{class:"token punctuation"},"("),p("start"),c("span",{class:"token punctuation"},","),p(" end"),c("span",{class:"token punctuation"},")"),p("\t"),c("span",{class:"token operator"},"|"),p(" 从 start 到 end（不含 end）"),c("span",{class:"token operator"},"|"),p(" \t允许 "),c("span",{class:"token operator"},"|"),p("\n"),c("span",{class:"token operator"},"|"),p(),c("span",{class:"token function"},"substring"),c("span",{class:"token punctuation"},"("),p("start"),c("span",{class:"token punctuation"},","),p(" end"),c("span",{class:"token punctuation"},")"),p("\t"),c("span",{class:"token operator"},"|"),p(" start 与 end 之间（包括 start，但不包括 end）"),c("span",{class:"token operator"},"|"),p(" \t负值代表 "),c("span",{class:"token number"},"0"),p(),c("span",{class:"token operator"},"|"),p("\n"),c("span",{class:"token operator"},"|"),p(),c("span",{class:"token function"},"substr"),c("span",{class:"token punctuation"},"("),p("start"),c("span",{class:"token punctuation"},","),p(" length"),c("span",{class:"token punctuation"},")"),p("\t"),c("span",{class:"token operator"},"|"),p(" 从 start 开始获取长为 length 的字符串\t"),c("span",{class:"token operator"},"|"),p(" 允许 start 为负数 "),c("span",{class:"token operator"},"|"),p(" \n")])],-1),On=c("h3",{id:"array"},[c("a",{class:"header-anchor",href:"#array","aria-hidden":"true"},"#"),p(" array")],-1),Jn=c("p",null,"循环遍历数组可以有如下两种方式：",-1),Nn=c("ul",null,[c("li",null,[c("code",null,"for (let i=0; i<arr.length; i++)"),p(" — 运行得最快，可兼容旧版本浏览器。")]),c("li",null,[c("code",null,"for (let item of arr)"),p(" — 现代语法，只能访问 items。")]),c("li",null,[c("code",null,"for (let i in arr)"),p(" — 永远不要用这个。")])],-1),xn=c("p",null,[p("数组默认有一个 "),c("code",null,"toString"),p(" 的操作。所以我们可以如下操作：")],-1),Mn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" a "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token function"},"String"),c("span",{class:"token punctuation"},"("),p("a"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token string"},"'1,2,3,4'"),p("\n")])],-1),Dn=c("h4",{id:"splice-start-deletecount-elem1-…-elemn"},[c("a",{class:"header-anchor",href:"#splice-start-deletecount-elem1-…-elemn","aria-hidden":"true"},"#"),p(" splice(start[, deleteCount, elem1, …, elemN])")],-1),In=c("ul",null,[c("li",null,[p("第一个参数表示 "),c("code",null,"start"),p(" 的位置；可以是负数，也可以是 0 等等；")]),c("li",null,"第二个参数表示要删除多少个元素，可以是 0；"),c("li",null,"往后的参数表示需要插入的元素，从 start 的位置之后开始。")],-1),Tn=c("h4",{id:"concat"},[c("a",{class:"header-anchor",href:"#concat","aria-hidden":"true"},"#"),p(" concat")],-1),Pn=c("p",null,"连接多个数组，如果一个 object 是可以被看作数组时，也是可以使用：",-1),_n=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" arr "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" obj "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n"),c("span",{class:"token operator"},"..."),p(),c("span",{class:"token string"},'"index"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token operator"},"..."),p(),c("span",{class:"token string"},'"array"'),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token operator"},"..."),p(),c("span",{class:"token punctuation"},"["),p("Symbol"),c("span",{class:"token punctuation"},"."),p("isConcatSpreadable"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token boolean"},"true"),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token operator"},"..."),p(" length"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),p(),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token operator"},">"),p(" arr"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"concat"),c("span",{class:"token punctuation"},"("),p("obj"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"["),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"<"),c("span",{class:"token number"},"2"),p(" empty items"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" arrayLike "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n"),c("span",{class:"token operator"},"..."),p("   "),c("span",{class:"token number"},"0"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"something"'),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token operator"},"..."),p("   "),c("span",{class:"token number"},"1"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"else"'),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token operator"},"..."),p("   "),c("span",{class:"token punctuation"},"["),p("Symbol"),c("span",{class:"token punctuation"},"."),p("isConcatSpreadable"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token boolean"},"true"),c("span",{class:"token punctuation"},","),p("\n"),c("span",{class:"token operator"},"..."),p("   length"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),p("\n"),c("span",{class:"token operator"},"..."),p(),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token operator"},">"),p(" arr"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"concat"),c("span",{class:"token punctuation"},"("),p("arrayLike"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"["),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'something'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'else'"),p(),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),An=c("h4",{id:"搜索"},[c("a",{class:"header-anchor",href:"#搜索","aria-hidden":"true"},"#"),p(" 搜索")],-1),Cn=c("ul",null,[c("li",null,[c("code",null,"arr.indexOf(item, from)"),p(" 从索引 from 开始搜索 item，如果找到则返回索引，否则返回 -1。")]),c("li",null,[c("code",null,"arr.lastIndexOf(item, from)"),p(" —— 和上面相同，只是从右向左搜索。")]),c("li",null,[c("code",null,"arr.includes(item, from)"),p(" —— 从索引 from 开始搜索 item，如果找到则返回 true（译注：如果没找到，则返回 false）。")])],-1),Yn=c("h4",{id:"find-findindex"},[c("a",{class:"header-anchor",href:"#find-findindex","aria-hidden":"true"},"#"),p(" find/findIndex")],-1),Fn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" result "),c("span",{class:"token operator"},"="),p(" arr"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"find"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[p("item"),c("span",{class:"token punctuation"},","),p(" index"),c("span",{class:"token punctuation"},","),p(" array")]),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token comment"},"// 如果返回 true，则返回 item 并停止迭代"),p("\n  "),c("span",{class:"token comment"},"// 对于假值（falsy）的情况，则返回 undefined"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])],-1),qn=c("p",null,[p("数组可以拍平，一般是 "),c("code",null,"flat"),p("。")],-1),zn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"var"),p(" arr1 "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},";"),p("\narr1"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"flat"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token comment"},"// [1, 2, 3, 4]"),p("\n\n"),c("span",{class:"token keyword"},"var"),p(" arr2 "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"6"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},";"),p("\narr2"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"flat"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token comment"},"// [1, 2, 3, 4, [5, 6]]"),p("\n\n"),c("span",{class:"token keyword"},"var"),p(" arr3 "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"6"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},";"),p("\narr3"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"flat"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6]"),p("\n\n"),c("span",{class:"token comment"},"//使用 Infinity，可展开任意深度的嵌套数组"),p("\n"),c("span",{class:"token keyword"},"var"),p(" arr4 "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"6"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"7"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"8"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"9"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"10"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},";"),p("\narr4"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"flat"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"Infinity"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"),p("\n")])],-1),Hn=c("p",null,"具体我们可以参考：",-1),$n=p("包含使用和相关的替代方案"),En=c("p",null,[p("此外还有一个小技巧，"),c("code",null,"Array"),p(" 和 "),c("code",null,"Array.of"),p("：")],-1),Ln=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token function"},"Array"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"7"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"["),p(),c("span",{class:"token operator"},"<"),c("span",{class:"token number"},"7"),p(" empty items"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token operator"},">"),p(" Array"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"of"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"7"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"["),p(),c("span",{class:"token number"},"7"),p(),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token operator"},">"),p(" Array"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"of"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"null"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"["),p(),c("span",{class:"token keyword"},"null"),p(),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token operator"},">"),p(" Array"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"of"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"undefined"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"["),p(),c("span",{class:"token keyword"},"undefined"),p(),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),Rn=c("h3",{id:"迭代"},[c("a",{class:"header-anchor",href:"#迭代","aria-hidden":"true"},"#"),p(" 迭代")],-1),Wn=c("p",null,"通过 [Symbol.iterator]` 实现 range",-1),Zn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" range "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token keyword"},"from"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p("\n  to"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),p("\n\n  "),c("span",{class:"token punctuation"},"["),p("Symbol"),c("span",{class:"token punctuation"},"."),p("iterator"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("current "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("from"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p("\n\n  "),c("span",{class:"token function"},"next"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"if"),p(),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("current "),c("span",{class:"token operator"},"<="),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("to"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n      "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token punctuation"},"{"),p(" done"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token boolean"},"false"),c("span",{class:"token punctuation"},","),p(" value"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("current"),c("span",{class:"token operator"},"++"),p(),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token keyword"},"else"),p(),c("span",{class:"token punctuation"},"{"),p("\n      "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token punctuation"},"{"),p(" done"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token boolean"},"true"),p(),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n    "),c("span",{class:"token punctuation"},"}"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token keyword"},"for"),p(),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"let"),p(" num "),c("span",{class:"token keyword"},"of"),p(" range"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("num"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// 1, 然后是 2, 3, 4, 5"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n")])],-1),Gn=c("ul",null,[c("li",null,[c("code",null,"Iterable"),p(" 如上所述，是实现了 Symbol.iterator 方法的对象。")]),c("li",null,[c("code",null,"Array-like"),p(" 是有索引和 length 属性的对象，所以它们看起来很像数组。")])],-1),Un=c("p",null,[p("可以使用 "),c("code",null,"Array.from "),p(" 对一个 string 类型的变量转换成 array。 比如：")],-1),Bn=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token operator"},">"),p(),c("span",{class:"token keyword"},"let"),p(" chars "),c("span",{class:"token operator"},"="),p(" Array"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"from"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"hello world"'),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token operator"},">"),p(" chars\n"),c("span",{class:"token punctuation"},"["),p("\n  "),c("span",{class:"token string"},"'h'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'e'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'l'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'l'"),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token string"},"'o'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"' '"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'w'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'o'"),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token string"},"'r'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'l'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'d'"),p("\n"),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),Kn=c("h3",{id:"map"},[c("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#"),p(" Map")],-1),Qn=c("ul",null,[c("li",null,[c("code",null,"new Map()"),p(" —— 创建 map。")]),c("li",null,[c("code",null,"map.set(key, value)"),p(" —— 根据键存储值。")]),c("li",null,[c("code",null,"map.get(key)"),p(" —— 根据键来返回值，如果 map 中不存在对应的 key，则返回 undefined。")]),c("li",null,[c("code",null,"map.has(key)"),p(" —— 如果 key 存在则返回 true，否则返回 false。")]),c("li",null,[c("code",null,"map.delete(key)"),p(" —— 删除指定键的值。")]),c("li",null,[c("code",null,"map.clear()"),p(" —— 清空 map。")]),c("li",null,[c("code",null,"map.size"),p(" —— 返回当前元素个数。")])],-1),Vn=c("blockquote",null,[c("p",null,[p("map[key] 不是使用 Map 的正确方式。 应当使用 "),c("code",null,"set"),p(" 和 "),c("code",null,"get")])],-1),Xn=c("h4",{id:"map-迭代"},[c("a",{class:"header-anchor",href:"#map-迭代","aria-hidden":"true"},"#"),p(" map 迭代")],-1),ns=c("p",null,"如果要在 map 里使用循环，可以使用以下三个方法：",-1),ss=c("ul",null,[c("li",null,[c("code",null,"map.keys()"),p(" —— 遍历并返回所有的键（returns an iterable for keys），")]),c("li",null,[c("code",null,"map.values()"),p(" —— 遍历并返回所有的值（returns an iterable for values），")]),c("li",null,[c("code",null,"map.entries()"),p(" —— 遍历并返回所有的实体（returns an iterable for entries）[key, value]，for…of 在默认情况下使用的就是这个。")])],-1),as=c("p",null,"此外还有两个比较方便的方法，用于 map 和 object 之间的转换",-1),ts=c("ul",null,[c("li",null,"Object.fromEntries 将 map 转换成 Object"),c("li",null,[p("Object.entries 生成 "),c("code",null,"[[key, value], [key, value]]"),p(" 可以用于创建 map")])],-1),os=c("h3",{id:"set"},[c("a",{class:"header-anchor",href:"#set","aria-hidden":"true"},"#"),p(" Set")],-1),es=c("ul",null,[c("li",null,[c("code",null,"new Set(iterable)"),p(" —— 创建一个 set，如果提供了一个 iterable 对象（通常是数组），将会从数组里面复制值到 set 中。")]),c("li",null,[c("code",null,"set.add(value)"),p(" —— 添加一个值，返回 set 本身")]),c("li",null,[c("code",null,"set.delete(value)"),p(" —— 删除值，如果 value 在这个方法调用的时候存在则返回 true ，否则返回 false。")]),c("li",null,[c("code",null,"set.has(value)"),p(" —— 如果 value 在 set 中，返回 true，否则返回 false。")]),c("li",null,[c("code",null,"set.clear()"),p(" —— 清空 set。")]),c("li",null,[c("code",null,"set.size"),p(" —— 返回元素个数。")])],-1),cs=c("h3",{id:"weakmap-weakset"},[c("a",{class:"header-anchor",href:"#weakmap-weakset","aria-hidden":"true"},"#"),p(" WeakMap / WeakSet")],-1),ps=c("p",null,[c("code",null,"WeakMap"),p(" 的键只能是 "),c("code",null,"object"),p("。 当在 object 被清理时，对应的 weakmap 中的内容也会被清理。 weakmap 适合在：")],-1),ls=c("ul",null,[c("li",null,"需要有缓存，当一个函数的结果需要被记住（“缓存”），这样在后续的对同一个对象的调用时，就可以重用这个被缓存的结果。当对象被垃圾回收时，对应的缓存的结果也会被自动地从内存中清除。"),c("li",null,"额外的数据，将这些数据放到 WeakMap 中，并使用该对象作为这些数据的键，那么当该对象被垃圾回收机制回收后，这些数据也会被自动清除")],-1),us=c("p",null,"注意， weakmap 只支持如下的几个方法：",-1),ks=c("ul",null,[c("li",null,"weakMap.get(key)"),c("li",null,"weakMap.set(key, value)"),c("li",null,"weakMap.delete(key)"),c("li",null,"weakMap.has(key)")],-1),rs=c("blockquote",null,[c("p",null,"这两个数据结构均不支持迭代。所以需要在合适的时机使用它们。")],-1),is=c("h3",{id:"object-keys-values-entries"},[c("a",{class:"header-anchor",href:"#object-keys-values-entries","aria-hidden":"true"},"#"),p(" Object.keys, values, entries")],-1),ds=c("blockquote",null,[c("p",null,"Object.keys/values/entries 会忽略 symbol 属性")],-1),ms=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[p("Object"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"fromEntries"),c("span",{class:"token punctuation"},"("),p("\n  "),c("span",{class:"token comment"},"// 转换为数组，之后使用 map 方法，然后通过 fromEntries 再转回到对象"),p("\n  Object"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"entries"),c("span",{class:"token punctuation"},"("),p("prices"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"map"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[c("span",{class:"token punctuation"},"["),p("key"),c("span",{class:"token punctuation"},","),p(" value"),c("span",{class:"token punctuation"},"]")]),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"=>"),p(),c("span",{class:"token punctuation"},"["),p("key"),c("span",{class:"token punctuation"},","),p(" value "),c("span",{class:"token operator"},"*"),p(),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])],-1),gs=c("h3",{id:"数组解构"},[c("a",{class:"header-anchor",href:"#数组解构","aria-hidden":"true"},"#"),p(" 数组解构")],-1),ys=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" arr "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},'"Firstname"'),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},'"Lastname"'),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"["),p("firstname"),c("span",{class:"token punctuation"},","),p(" lastname"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(" arr\n")])],-1),hs=c("p",null,[p("如果不想要某个元素可以使用 "),c("code",null,","),p(" 来忽略对应位置上的内容")],-1),fs=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"["),p("a"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},","),p("c"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},"'a'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'b'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'c'"),c("span",{class:"token punctuation"},"]"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("c"),c("span",{class:"token punctuation"},")"),p("\n")])],-1),bs=c("p",null,"实际上等号右侧可以是任何可迭代的内容，也可以是任何可以赋值的内容。",-1),ws=c("p",null,[p("任何剩余的内容，可以使用 "),c("code",null,"..."),p(" 来接收。比如：")],-1),js=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"["),p("a"),c("span",{class:"token punctuation"},","),p(" b"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"..."),p("c"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"6"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"7"),c("span",{class:"token punctuation"},"]"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("c"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"4"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"5"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"6"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"7"),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),vs=c("p",null,[p("数组解构赋值的默认值是 "),c("code",null,"undefined")],-1),Ss=c("h3",{id:"结构解构"},[c("a",{class:"header-anchor",href:"#结构解构","aria-hidden":"true"},"#"),p(" 结构解构")],-1),Os=c("p",null,"我们一般使用结构的字段名来直接获取对应的字段的 value。 也可以将对应的字段的值赋值给自定义的变量。",-1),Js=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" options "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  title"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},"'menu'"),c("span",{class:"token punctuation"},","),p("\n  width"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},","),p("\n  height"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"200"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"{"),p("title"),c("span",{class:"token punctuation"},","),p(" width"),c("span",{class:"token operator"},":"),p(" w"),c("span",{class:"token punctuation"},","),p(" height"),c("span",{class:"token operator"},":"),p(" h"),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token operator"},"="),p(" options \n")])],-1),Ns=c("p",null,[p("对于不一定存在的字段，我们可以使用 "),c("code",null,"="),p(" 设置默认值。这样避免因为字段不存在而报错。")],-1),xs=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" options "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  title"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},"'menu'"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"{"),p("width "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},","),p(" height "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"200"),c("span",{class:"token punctuation"},","),p(" title"),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token operator"},"="),p(" options\n"),c("span",{class:"token comment"},"//同样可以做到重命名"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"{"),p("width"),c("span",{class:"token operator"},":"),p(" w "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},","),p(" height"),c("span",{class:"token operator"},":"),p(" h "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"200"),c("span",{class:"token punctuation"},","),p(" title"),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token operator"},"="),p(" options\n")])],-1),Ms=c("p",null,[p("对应剩余的内容一样可以使用 "),c("code",null,"..."),p(" 。")],-1),Ds=c("p",null,"可以使用前套的解构，一个基本的例子：",-1),Is=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" options "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  size"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"{"),p("\n    width"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},","),p("\n    height"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"200"),p("\n  "),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p("\n  items"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},"'hello'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'world'"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p("\n  extra"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token boolean"},"true"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token punctuation"},"{"),p(" size"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"{"),p("width"),c("span",{class:"token punctuation"},","),p(" height"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(" items"),c("span",{class:"token operator"},":"),c("span",{class:"token punctuation"},"["),p("item1"),c("span",{class:"token punctuation"},","),p(" item2"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(" noexist"),c("span",{class:"token operator"},"="),c("span",{class:"token boolean"},"true"),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token operator"},"="),p(" options\n")])],-1),Ts=c("h3",{id:"智能函数参数"},[c("a",{class:"header-anchor",href:"#智能函数参数","aria-hidden":"true"},"#"),p(" 智能函数参数")],-1),Ps=c("p",null,"一个函数需要接收很多的参数时候，我们一般通过传递一个结构到函数内，此时可以使用结构或者是嵌套解构的方式进行：",-1),_s=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"showMenu"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},"{"),p(" title "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token string"},'"Menu"'),c("span",{class:"token punctuation"},","),p(" width"),c("span",{class:"token operator"},":"),p(" w "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},","),p(" height "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"200"),p(),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token function"},"alert"),c("span",{class:"token punctuation"},"("),p(),c("span",{class:"token template-string"},[c("span",{class:"token template-punctuation string"},"`"),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),p("title"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token string"}," "),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),p("w"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token string"}," "),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),p("height"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token template-punctuation string"},"`")]),p(),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token function"},"showMenu"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p(),c("span",{class:"token comment"},"// Menu 100 200"),p("\n")])],-1),As=c("h3",{id:"时间"},[c("a",{class:"header-anchor",href:"#时间","aria-hidden":"true"},"#"),p(" 时间")],-1),Cs=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" date "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Date"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token comment"},"// 时间戳,带毫秒"),p("\ndate"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"getTime"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 或者使用 +date 效果一样"),p("\n"),c("span",{class:"token comment"},"// 增加 24 小时，单位毫秒"),p("\n"),c("span",{class:"token keyword"},"let"),p(" onedayLater "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Date"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"24"),p(),c("span",{class:"token operator"},"*"),p(),c("span",{class:"token number"},"3600"),p(),c("span",{class:"token operator"},"*"),p(),c("span",{class:"token number"},"1000"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token comment"},"// 解析时间"),p("\n"),c("span",{class:"token keyword"},"let"),p(" date "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Date"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'2022-01-02'"),c("span",{class:"token punctuation"},")"),p("\n\n"),c("span",{class:"token comment"},"//可以完全指定时间"),p("\n"),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Date"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2011"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"0"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"//1 Jan 2011, 00:00:00"),p("\n")])],-1),Ys=c("p",null,"一些比较方便的访问日期的组件：",-1),Fs=c("ul",null,[c("li",null,"getFullYear()"),c("li",null,"getMonth() // 0-11"),c("li",null,"getDate() // 只返回 1-31 之间的数字"),c("li",null,"getHours()"),c("li",null,"getMinutes()"),c("li",null,"getSeconds()"),c("li",null,"getMilliseconds()"),c("li",null,"getDay() 返回一周中的第几天 0-6， 0表示周日")],-1),qs=c("p",null,"同时，我们可以使用一些设置时间的函数对时间进行设置。这些主要是用来配置一些指定的时间",-1),zs=c("ul",null,[c("li",null,"setFullYear(year, [month], [date])"),c("li",null,"setMonth(month, [date])"),c("li",null,"setDate(date)"),c("li",null,"setHours(hour, [min], [sec], [ms])"),c("li",null,"setMinutes(min, [sec], [ms])"),c("li",null,"setSeconds(sec, [ms])"),c("li",null,"setMilliseconds(ms)"),c("li",null,"setTime(milliseconds)（使用自 1970-01-01 00:00:00 UTC+0 以来的毫秒数来设置整个日期）")],-1),Hs=c("p",null,"两个时间可以直接相减，结果是 ms 的时间差。 一个更快用于计算时间差的方式是：",-1),$s=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" start "),c("span",{class:"token operator"},"="),p(" Date"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"now"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token operator"},"..."),c("span",{class:"token punctuation"},"."),p("\n"),c("span",{class:"token keyword"},"let"),p(" end "),c("span",{class:"token operator"},"="),p(" Date"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"now"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(" diff "),c("span",{class:"token operator"},"="),p(" end"),c("span",{class:"token operator"},"-"),p("start\n")])],-1),Es=c("p",null,[p("可以使用 "),c("code",null,"Date.parse(str)"),p(" 来解析日期, 字符串的格式应该为："),c("code",null,"YYYY-MM-DDTHH:mm:ss.sssZ"),p("，其中：")],-1),Ls=c("ul",null,[c("li",null,"YYYY-MM-DD —— 日期：年-月-日。"),c("li",null,"字符 “T” 是一个分隔符。"),c("li",null,"HH:mm:ss.sss —— 时间：小时，分钟，秒，毫秒。"),c("li",null,"可选字符 ‘Z’ 为 ±hh:mm 格式的时区。单个字符 Z 代表 UTC+0 时区。")],-1),Rs=c("h3",{id:"json"},[c("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),p(" JSON")],-1),Ws=c("p",null,[p("一般我们使用 "),c("code",null,"JSON.parse"),p(" 和 "),c("code",null,"JSON.stringify"),p(" 这两个方法。 其中 "),c("code",null,"JSON.stringify"),p(" 有两个不太常用参数。 "),c("code",null,"JSON.stringify(value, replacer, spaces)")],-1),Zs=c("ul",null,[c("li",null,"replacer")],-1),Gs=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" object "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  title"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},"'Hello'"),c("span",{class:"token punctuation"},","),p("\n  number"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"10"),c("span",{class:"token punctuation"},","),p("\n  arr"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},","),c("span",{class:"token number"},"3"),c("span",{class:"token punctuation"},"]"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token comment"},"// 使用数组"),p("\n"),c("span",{class:"token constant"},"JSON"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"stringify"),c("span",{class:"token punctuation"},"("),p("object"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},"'arr'"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p("  "),c("span",{class:"token comment"},"// '{\"arr\":[1,2,3]}'"),p("\n\n"),c("span",{class:"token comment"},"// 使用函数"),p("\n"),c("span",{class:"token constant"},"JSON"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"stringify"),c("span",{class:"token punctuation"},"("),p("object"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"replacer"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[p("key"),c("span",{class:"token punctuation"},","),p(" value")]),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token template-string"},[c("span",{class:"token template-punctuation string"},"`"),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),p("key"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token string"},": "),c("span",{class:"token interpolation"},[c("span",{class:"token interpolation-punctuation punctuation"},"${"),p("value"),c("span",{class:"token interpolation-punctuation punctuation"},"}")]),c("span",{class:"token template-punctuation string"},"`")]),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token punctuation"},"("),p("key "),c("span",{class:"token operator"},"=="),p(),c("span",{class:"token string"},"'arr'"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"?"),p(),c("span",{class:"token keyword"},"undefined"),p(),c("span",{class:"token operator"},":"),p(" value"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),p("   "),c("span",{class:"token comment"},'// \'{"title":"Hello","number":10}\''),p("\n")])],-1),Us=c("ul",null,[c("li",null,"space 主要是用来进行美化输出的。")],-1),Bs=c("h4",{id:"自定义-tojson"},[c("a",{class:"header-anchor",href:"#自定义-tojson","aria-hidden":"true"},"#"),p(" 自定义 toJSON")],-1),Ks=c("p",null,"像 toString 进行字符串转换，对象也可以提供 toJSON 方法来进行 JSON 转换。如果可用，JSON.stringify 会自动调用它。",-1),Qs=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" room "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  number"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"23"),c("span",{class:"token punctuation"},","),p("\n  "),c("span",{class:"token function"},"toJSON"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("number"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(" meetup "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  title"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token string"},'"Conference"'),c("span",{class:"token punctuation"},","),p("\n  room\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},";"),p("\n\n"),c("span",{class:"token constant"},"JSON"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"stringify"),c("span",{class:"token punctuation"},"("),p("room"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 23"),p("\n\n"),c("span",{class:"token constant"},"JSON"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"stringify"),c("span",{class:"token punctuation"},"("),p("meetup"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token comment"},'/*\n  {\n    "title":"Conference",\n    "room": 23\n  }\n*/'),p("\n")])],-1),Vs=c("h4",{id:"json-parse"},[c("a",{class:"header-anchor",href:"#json-parse","aria-hidden":"true"},"#"),p(" JSON.parse")],-1),Xs=c("p",null,"同样的，JSON.parse 是可以接收一个 receiver 参数的，用于解析一些特殊字段，或者是需要自定义处理的内容。比如：",-1),na=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" schedule "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token template-string"},[c("span",{class:"token template-punctuation string"},"`"),c("span",{class:"token string"},'{\n  "meetups": [\n    {"title":"Conference","date":"2017-11-30T12:00:00.000Z"},\n    {"title":"Birthday","date":"2017-04-18T12:00:00.000Z"}\n  ]\n}'),c("span",{class:"token template-punctuation string"},"`")]),c("span",{class:"token punctuation"},";"),p("\n\nschedule "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token constant"},"JSON"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"parse"),c("span",{class:"token punctuation"},"("),p("schedule"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token keyword"},"function"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[p("key"),c("span",{class:"token punctuation"},","),p(" value")]),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token keyword"},"if"),p(),c("span",{class:"token punctuation"},"("),p("key "),c("span",{class:"token operator"},"=="),p(),c("span",{class:"token string"},"'date'"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Date"),c("span",{class:"token punctuation"},"("),p("value"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token keyword"},"return"),p(" value"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])],-1),sa=c("blockquote",null,[c("p",null,"注意， replacer 的第一次会返回一个 key 是空，value 是自身的结果，这个在操作的时候需要考虑到。")],-1),aa=c("h3",{id:"函数-1"},[c("a",{class:"header-anchor",href:"#函数-1","aria-hidden":"true"},"#"),p(" 函数")],-1),ta=c("p",null,[p("我们可以通过 "),c("code",null,"functionname.name"),p(" 来获取一个函数的名称。比如：")],-1),oa=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"sayYeah"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'yeah'"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("sayYeah"),c("span",{class:"token punctuation"},"."),p("name"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// sayYeah"),p("\n")])],-1),ea=c("p",null,[p("可以通过 "),c("code",null,"length"),p(" 来获取到函数的参数，不过 rest 的参数不会被统计。")],-1),ca=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"f1"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},[p("a"),c("span",{class:"token punctuation"},","),p("b"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"..."),p("c")]),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),c("span",{class:"token punctuation"},"}"),p("\n\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("f1"),c("span",{class:"token punctuation"},"."),p("length"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 2"),p("\n")])],-1),pa=c("p",null,"可以给函数自定义一些变量，这样可以做到在函数外部也是可以访问到对应的变量的，这个和闭包是有所不同的。",-1),la=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"makeCounter"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n\n  "),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"counter"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"return"),p(" counter"),c("span",{class:"token punctuation"},"."),p("count"),c("span",{class:"token operator"},"++"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n\n  counter"),c("span",{class:"token punctuation"},"."),p("count"),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"0"),p("\n  "),c("span",{class:"token keyword"},"return"),p(" counter\n"),c("span",{class:"token punctuation"},"}"),p("\n\n\n"),c("span",{class:"token keyword"},"let"),p(" counter "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token function"},"makeCounter"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token function"},"counter"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),p("  "),c("span",{class:"token comment"},"// 0"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token function"},"counter"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),p("  "),c("span",{class:"token comment"},"// 1"),p("\n\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("counter"),c("span",{class:"token punctuation"},"."),p("count"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 2"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("counter"),c("span",{class:"token punctuation"},"."),p("count"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 2"),p("\n")])],-1),ua=c("p",null,"函数的 NFE(Named Function Expression), 可以在函数被赋值了另外的一变量的时候仍然可以调用。",-1),ka=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(),c("span",{class:"token function-variable function"},"sayhi"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"func"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"name"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token keyword"},"if"),c("span",{class:"token punctuation"},"("),p("name"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("name"),c("span",{class:"token punctuation"},")"),p("\n  "),c("span",{class:"token punctuation"},"}"),p(),c("span",{class:"token keyword"},"else"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token function"},"func"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"default"'),c("span",{class:"token punctuation"},")"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(" sayhi2 "),c("span",{class:"token operator"},"="),p(" sayhi\n"),c("span",{class:"token keyword"},"let"),p(" welcome "),c("span",{class:"token operator"},"="),p(" sayhi\n"),c("span",{class:"token function"},"welcome"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p("\nsayhi "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"null"),p("\n\n"),c("span",{class:"token function"},"sayhi2"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p("\n")])],-1),ra=c("h3",{id:"settimeout-setinterval"},[c("a",{class:"header-anchor",href:"#settimeout-setinterval","aria-hidden":"true"},"#"),p(" setTimeout / setInterval")],-1),ia=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" timerId "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),p("func"),c("span",{class:"token operator"},"|"),p("code"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),p("delay"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),p("arg1"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),p("arg2"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"..."),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token keyword"},"let"),p(" timerId "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token function"},"setInterval"),c("span",{class:"token punctuation"},"("),p("func"),c("span",{class:"token operator"},"|"),p("code"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),p("delay"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),p("arg1"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),p("arg2"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"..."),c("span",{class:"token punctuation"},")"),p("\n")])],-1),da=c("ul",null,[c("li",null,"setTimeout 允许我们将函数推迟到一段时间间隔之后再执行。"),c("li",null,"setInterval 允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。")],-1),ma=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" tid "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"=>"),p(),c("span",{class:"token punctuation"},"{"),p(" console"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"say hello"'),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"5000"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token function"},"clearTimeout"),c("span",{class:"token punctuation"},"("),p("tid"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// 取消推迟执行"),p("\n")])],-1),ga=c("blockquote",null,[c("p",null,"嵌套的 setTimeout 能够精确地设置两次执行之间的延时，而 setInterval 却不能。")],-1),ya=c("p",null,[p("这边需要注意的是 "),c("code",null,"setInterval"),p(" 是一个固定间隔，如果执行的函数耗时超过这个间隔，setInterval 还是会在指定时间内调用函数。 而用两次嵌套的 setTimeout 可以比较均匀一些。")],-1),ha=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" i "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"run"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token function"},"func"),c("span",{class:"token punctuation"},"("),p("i"),c("span",{class:"token operator"},"++"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n  "),c("span",{class:"token function"},"setTimeout"),c("span",{class:"token punctuation"},"("),p("run"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token number"},"100"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])],-1),fa=c("p",null,"注意，例如，浏览器内的计时器可能由于许多原因而变慢：",-1),ba=c("ul",null,[c("li",null,"CPU 过载。"),c("li",null,"浏览器页签处于后台模式。"),c("li",null,"笔记本电脑用的是电池供电（译注：使用电池供电会以降低性能为代价提升续航）。")],-1),wa=c("p",null,"所有这些因素，可能会将定时器的最小计时器分辨率（最小延迟）增加到 300ms 甚至 1000ms，具体以浏览器及其设置为准。",-1),ja=c("blockquote",null,[c("p",null,"任何 setTimeout 都只会在当前代码执行完毕之后才会执行。")],-1),va=c("h3",{id:"对象属性配置"},[c("a",{class:"header-anchor",href:"#对象属性配置","aria-hidden":"true"},"#"),p(" 对象属性配置")],-1),Sa=c("p",null,[p("可以通过 "),c("code",null,"Object.getOwnPropertyDescriptor(obj, propertyName)"),p(" 获取一个对象的指定字段的属性描述信息。 同时可以使用 "),c("code",null,"Object.defineProperty(obj, propertyName, descriptor)"),p(" 去设置属性。")],-1),Oa=c("p",null,"这边一般会涉及到三个标志：",-1),Ja=c("ul",null,[c("li",null,"writable"),c("li",null,"enumerable"),c("li",null,"configurable")],-1),Na=c("p",null,[p("使用 "),c("code",null,"defineProperty"),p(" 可以设置这些标志。 当某个属性的 "),c("code",null,"enumerable"),p(" 被设置成 false 时，则该属性将不会出现在 "),c("code",null,"for ... in ..."),p(" 中。 当我们将 "),c("code",null,"configurable"),p(" 设置成 false 时，则我们无法删除该属性，且该过程不可逆。")],-1),xa=c("p",null,[p("此外我们可以使用 "),c("code",null,"defineProerties"),p(" 来设置多个属性的标志。同理可以使用 "),c("code",null,"getOwnPropertyDescriptors"),p(" 获取多个属性的。")],-1),Ma=c("p",null,"可以使用如下方式进行 object 的克隆",-1),Da=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" clone "),c("span",{class:"token operator"},"="),p(" Object"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"defineProperties"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},"{"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(" Object"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"getOwnPropertyDescriptors"),c("span",{class:"token punctuation"},"("),p("obj"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},";"),p("\n")])],-1),Ia=c("p",null,[p("对象还包含两个访问器属性，"),c("code",null,"getter"),p(" 和 "),c("code",null,"setter"),p("。即如下的代码：")],-1),Ta=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"let"),p(" obj "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token keyword"},"get"),p(),c("span",{class:"token function"},"propName"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n\n  "),c("span",{class:"token punctuation"},"}"),p("\n\n  "),c("span",{class:"token keyword"},"set"),p(),c("span",{class:"token function"},"propName"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n\n  "),c("span",{class:"token punctuation"},"}"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n")])],-1),Pa=c("p",null,"一个 Object 的属性不能既是访问器，有是数据属性，比如下面的方式就是错误的。",-1),_a=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token comment"},"//error code"),p("\nObject"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"defineProperty"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},"{"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'prop'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token function"},"get"),c("span",{class:"token punctuation"},"("),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n    "),c("span",{class:"token keyword"},"return"),p(),c("span",{class:"token number"},"1"),p("\n  "),c("span",{class:"token punctuation"},"}"),p("\n\n  value"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token number"},"2"),p("\n"),c("span",{class:"token punctuation"},"}"),c("span",{class:"token punctuation"},")"),p("\n")])],-1),Aa=c("p",null,[p("同样访问属性的描述符也可以使用 "),c("code",null,"defineProperty"),p(" 来设置。除了 "),c("code",null,"value"),p(" 和 "),c("code",null,"writable"),p(" 这两个不能设置外，我们可以设置 "),c("code",null,"get"),p(","),c("code",null,"set"),p(", "),c("code",null,"enumerable"),p(" 和 "),c("code",null,"configurable"),p(" 这四个。")],-1),Ca=c("h2",{id:"原型"},[c("a",{class:"header-anchor",href:"#原型","aria-hidden":"true"},"#"),p(" 原型")],-1),Ya=c("p",null,[p("可以使用 "),c("code",null,"__proto__"),p(" 设置，也可以通过 "),c("code",null,"getPrototypeOf"),p(" 和 "),c("code",null,"setPrototypeOf"),p(" 来代替 "),c("code",null,"__proto__"),p(" 的设置方式。")],-1),Fa=c("p",null,[c("code",null,"for ... in"),p(" 循环也会迭代继承的属性。但是 "),c("code",null,"Object.keys"),p(" 只会返回自己的 key。")],-1),qa=c("p",null,[p("可以使用 "),c("code",null," obj.hasOwnProperty(key)"),p(" 的方式来判断 key 是否是 obj 自身的，而不是痛殴继承获得的。")],-1),za=c("h2",{id:"f-prototype"},[c("a",{class:"header-anchor",href:"#f-prototype","aria-hidden":"true"},"#"),p(" F.prototype")],-1),Ha=c("p",null,[p("当我们在使用 "),c("code",null,"new"),p(" 关键字创建一个新的对象时，同样可以通过继承的方式来获取属性。")],-1),$a=c("pre",{class:"language-js"},[c("code",{class:"language-js"},[c("span",{class:"token keyword"},"function"),p(),c("span",{class:"token function"},"Rabbit"),c("span",{class:"token punctuation"},"("),c("span",{class:"token parameter"},"name"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token punctuation"},"{"),p("\n  "),c("span",{class:"token keyword"},"this"),c("span",{class:"token punctuation"},"."),p("name "),c("span",{class:"token operator"},"="),p(" name\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token keyword"},"let"),p(" animal "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"{"),p("\n  eats"),c("span",{class:"token operator"},":"),p(),c("span",{class:"token boolean"},"true"),p("\n"),c("span",{class:"token punctuation"},"}"),p("\n\n"),c("span",{class:"token class-name"},"Rabbit"),c("span",{class:"token punctuation"},"."),p("prototype "),c("span",{class:"token operator"},"="),p(" animal\n\n"),c("span",{class:"token keyword"},"let"),p(" rabbit "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token keyword"},"new"),p(),c("span",{class:"token class-name"},"Rabbit"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},'"White Rabbit"'),c("span",{class:"token punctuation"},")"),p("\nconsole"),c("span",{class:"token punctuation"},"."),c("span",{class:"token function"},"log"),c("span",{class:"token punctuation"},"("),p("rabbit"),c("span",{class:"token punctuation"},"."),p("eats"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"// true"),p("\n")])],-1),Ea=c("p",null,[p("每个函数都有构造器属性，默认的 prototype 只有一个属性 "),c("code",null,"constructor"),p(" 的对象，这个属性指向函数本身。")],-1),La=c("p",null,[c("strong",null,"prototyepe 属性在常规的对象上没有什么特殊的含义，只是一个普通的字段，但是在函数里，就有了特殊意义了")],-1),Ra=c("h2",{id:"原生的原型"},[c("a",{class:"header-anchor",href:"#原生的原型","aria-hidden":"true"},"#"),p(" 原生的原型")],-1),Wa=c("ul",null,[c("li",null,[p("所有的内建对象都遵循相同的模式（pattern）： "),c("ul",null,[c("li",null,"方法都存储在 prototype 中（Array.prototype、Object.prototype、Date.prototype 等）。"),c("li",null,"对象本身只存储数据（数组元素、对象属性、日期）。")])]),c("li",null,"原始数据类型也将方法存储在包装器对象的 prototype 中：Number.prototype、String.prototype 和 Boolean.prototype。只有 undefined 和 null 没有包装器对象。"),c("li",null,"内建原型可以被修改或被用新的方法填充。但是不建议更改它们。唯一允许的情况可能是，当我们添加一个还没有被 JavaScript 引擎支持，但已经被加入 JavaScript 规范的新标准时，才可能允许这样做。")],-1),Za=c("blockquote",null,[c("p",null,[p("如果要将一个用户生成的键放入一个对象，那么内建的 "),c("strong",null,"proto"),p(" getter/setter 是不安全的。因为用户可能会输入 “"),c("strong",null,"proto"),p("” 作为键，这会导致一个 error，虽然我们希望这个问题不会造成什么大影响，但通常会造成不可预料的后果。")])],-1),Ga=c("blockquote",null,[c("p",null,[p("因此，我们可以使用 Object.create(null) 创建一个没有 "),c("strong",null,"proto"),p(" 的 “very plain” 对象，或者对此类场景坚持使用 Map 对象就可以了。")])],-1),Ua={expose:[],setup(p){const Ua={title:"Javascript INFO notes",date:"2022-01-05T00:00:00.000Z",author:"Linkang Chan",twitter:"JessEisen_LJ",description:"morden javascript",public:!0,tag:"22A05 mordenJS",meta:[{property:"og:title",content:"Javascript INFO notes"},{property:"og:description",content:"morden javascript"},{name:"description",content:"morden javascript"}]};return a({title:"Javascript INFO notes",meta:[{property:"og:title",content:"Javascript INFO notes"},{property:"og:description",content:"morden javascript"},{name:"description",content:"morden javascript"}]}),(a,p)=>{const Ba=n,Ka=s;return t(),o(Ka,{frontmatter:Ua},{default:e((()=>[c("div",null,[l,u,k,r,i,d,m,g,y,h,f,b,w,j,v,c("p",null,[c(Ba,{text:"devTool doc",url:"https://developer.chrome.com/docs/devtools/"},{default:e((()=>[S])),_:1})]),O,c("p",null,[c(Ba,{text:"JsDoc",url:"https://en.wikipedia.org/wiki/JSDoc"},{default:e((()=>[J])),_:1}),c(Ba,{text:"JsDoc 3",url:"https://github.com/jsdoc/jsdoc"},{default:e((()=>[N])),_:1})]),x,c("p",null,[c(Ba,{text:"ES6",url:"https://kangax.github.io/compat-table/es6/"},{default:e((()=>[M])),_:1})]),D,I,T,P,_,A,C,Y,F,q,z,H,$,E,L,R,W,Z,G,U,B,K,Q,V,X,nn,sn,an,tn,on,en,cn,pn,ln,un,kn,rn,dn,mn,gn,yn,hn,fn,bn,wn,jn,vn,Sn,On,Jn,Nn,xn,Mn,Dn,In,Tn,Pn,_n,An,Cn,Yn,Fn,qn,zn,Hn,c("p",null,[c(Ba,{text:"MDN flat documentation",url:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"},{default:e((()=>[$n])),_:1})]),En,Ln,Rn,Wn,Zn,Gn,Un,Bn,Kn,Qn,Vn,Xn,ns,ss,as,ts,os,es,cs,ps,ls,us,ks,rs,is,ds,ms,gs,ys,hs,fs,bs,ws,js,vs,Ss,Os,Js,Ns,xs,Ms,Ds,Is,Ts,Ps,_s,As,Cs,Ys,Fs,qs,zs,Hs,$s,Es,Ls,Rs,Ws,Zs,Gs,Us,Bs,Ks,Qs,Vs,Xs,na,sa,aa,ta,oa,ea,ca,pa,la,ua,ka,ra,ia,da,ma,ga,ya,ha,fa,ba,wa,ja,va,Sa,Oa,Ja,Na,xa,Ma,Da,Ia,Ta,Pa,_a,Aa,Ca,Ya,Fa,qa,za,Ha,$a,Ea,La,Ra,Wa,Za,Ga])])),_:1})}}};export default Ua;
