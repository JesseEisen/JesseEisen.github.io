import{l as e,f as r,A as a}from"./framework.ab59a038.js";const t='{"title":"21B07","description":"","frontmatter":{"title":"21B07","subtitle":"python hard way","category":"python","date":"2021-01-21T00:00:00.000Z"},"headers":[{"level":2,"title":"command line argument parse","slug":"command-line-argument-parse"},{"level":2,"title":"progess bar","slug":"progess-bar"}],"relativePath":"daily/21B07.md","lastUpdated":1611292906556}',n={},o=a('<p><div class="table-of-contents"><ul><li><a href="#command-line-argument-parse">command line argument parse</a></li><li><a href="#progess-bar">progess bar</a></li></ul></div></p><hr><h2 id="command-line-argument-parse"><a class="header-anchor" href="#command-line-argument-parse" aria-hidden="true">#</a> command line argument parse</h2><p>使用 [<a href="https://click.palletsprojects.com/en/7.x/" target="_blank" rel="noopener noreferrer">click</a>] 作为解析库，可以方便的实现子命令操作。整理一些使用中遇到的问题。</p><ul><li>对 argument 进行注释</li></ul><p>使用多行注释的方式 <code>&quot;&quot;&quot; xxx &quot;&quot;&quot;</code>。但是 click 默认是现在在统一行，去除掉了换行的操作。所以在有多参数的情况下显示比较乱。解决方式是：</p><div class="language-"><pre><code>@click.command()\n@click.argument(&#39;gt&#39;, type=click.Path(exists=True))\n@click.argument(&#39;prefix&#39;, type=click.Path(exists=True))\ndef execute(gt, prefix):\n    &quot;&quot;&quot;\n       \\b \n       explain the command usage\n       gt: xxxx\n       prefix: xxxxx\n    &quot;&quot;&quot;\n</code></pre></div><h2 id="progess-bar"><a class="header-anchor" href="#progess-bar" aria-hidden="true">#</a> progess bar</h2><p>使用 <a href="https://tqdm.github.io/docs/cli/" target="_blank" rel="noopener noreferrer">tqdm</a> 搭配各种场景使用，比如在 requests 中显示现在的进度时，可以有如下的方式：</p><div class="language-"><pre><code>r = requests.get(url, stream=True, allow_redirects=True)\n... # status code check \npath = pathlib.Path(filename).expanduser().resolve()\npath.parent.mkdir(parents=True, exist_ok=True)\n\ndesc = filename.ljust(22, &#39; &#39;) # 22 is the lenght bigger than filename, should change\nr.raw.read = functools.partial(r.raw.read, decode_content=True)  # Decompress if needed\nwith tqdm.tqdm.wrapattr(r.raw, &quot;read&quot;, total=file_size, desc=desc) as r_raw:\n     with path.open(&quot;wb&quot;) as f:\n            shutil.copyfileobj(r_raw, f)\n</code></pre></div>',10);n.render=function(a,t,n,s,l,i){return e(),r("div",null,[o])};export default n;export{t as __pageData};
