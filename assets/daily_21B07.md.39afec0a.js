import{l as e,f as r,A as a}from"./framework.ab59a038.js";const i='{"title":"21B07","description":"","frontmatter":{"title":"21B07","subtitle":"python hard way","category":"python","date":"2021-01-21T00:00:00.000Z"},"headers":[{"level":2,"title":"command line argument parse","slug":"command-line-argument-parse"},{"level":2,"title":"progess bar","slug":"progess-bar"},{"level":2,"title":"requirements.txt","slug":"requirements-txt"},{"level":2,"title":"tar file","slug":"tar-file"},{"level":2,"title":"zip file","slug":"zip-file"},{"level":2,"title":"subprocess","slug":"subprocess"},{"level":2,"title":"sh","slug":"sh"},{"level":2,"title":"format","slug":"format"},{"level":2,"title":"listdir","slug":"listdir"}],"relativePath":"daily/21B07.md","lastUpdated":1615544240693}',t={},l=a('<p><div class="table-of-contents"><ul><li><a href="#command-line-argument-parse">command line argument parse</a></li><li><a href="#progess-bar">progess bar</a></li><li><a href="#requirements-txt">requirements.txt</a></li><li><a href="#tar-file">tar file</a></li><li><a href="#zip-file">zip file</a></li><li><a href="#subprocess">subprocess</a></li><li><a href="#sh">sh</a></li><li><a href="#format">format</a></li><li><a href="#listdir">listdir</a></li></ul></div></p><hr><h2 id="command-line-argument-parse"><a class="header-anchor" href="#command-line-argument-parse" aria-hidden="true">#</a> command line argument parse</h2><p>使用 [<a href="https://click.palletsprojects.com/en/7.x/" target="_blank" rel="noopener noreferrer">click</a>] 作为解析库，可以方便的实现子命令操作。整理一些使用中遇到的问题。</p><ul><li>对 argument 进行注释</li></ul><p>使用多行注释的方式 <code>&quot;&quot;&quot; xxx &quot;&quot;&quot;</code>。但是 click 默认是现在在统一行，去除掉了换行的操作。所以在有多参数的情况下显示比较乱。解决方式是：</p><div class="language-"><pre><code>@click.command()\n@click.argument(&#39;gt&#39;, type=click.Path(exists=True))\n@click.argument(&#39;prefix&#39;, type=click.Path(exists=True))\ndef execute(gt, prefix):\n    &quot;&quot;&quot;\n       \\b \n       explain the command usage\n       gt: xxxx\n       prefix: xxxxx\n    &quot;&quot;&quot;\n</code></pre></div><h2 id="progess-bar"><a class="header-anchor" href="#progess-bar" aria-hidden="true">#</a> progess bar</h2><p>使用 [<a href="https://github.com/tqdm/tqdm" target="_blank" rel="noopener noreferrer">tqdm</a>] 搭配各种场景使用，比如在 requests 中显示现在的进度时，可以有如下的方式：</p><div class="language-"><pre><code>r = requests.get(url, stream=True, allow_redirects=True)\n... # status code check \npath = pathlib.Path(filename).expanduser().resolve()\npath.parent.mkdir(parents=True, exist_ok=True)\n\ndesc = filename.ljust(22, &#39; &#39;) # 22 is the lenght bigger than filename, should change\nr.raw.read = functools.partial(r.raw.read, decode_content=True)  # Decompress if needed\nwith tqdm.tqdm.wrapattr(r.raw, &quot;read&quot;, total=file_size, desc=desc) as r_raw:\n     with path.open(&quot;wb&quot;) as f:\n            shutil.copyfileobj(r_raw, f)\n</code></pre></div><p>同时也可以在命令行中使用：</p><div class="language-"><pre><code>find . -name &#39;*.py&#39; -type f -exec cat \\{} \\; \\\n  | tqdm --unit loc --unit_scale --total 857366 &gt;&gt; /dev/null\n100%|█████████████████████████████████| 857K/857K [00:04&lt;00:00, 246Kloc/s]\n</code></pre></div><p>更多使用参考文档 [<a href="https://tqdm.github.io/docs" target="_blank" rel="noopener noreferrer">tqdm documention</a>] 。</p><h2 id="requirements-txt"><a class="header-anchor" href="#requirements-txt" aria-hidden="true">#</a> requirements.txt</h2><p>这个文件可以用于python项目初始化时安装依赖使用。可以通过两种方式获取到：</p><div class="language-"><pre><code># 获取完整的依赖环境\n$ pip3 freeze &gt; requirements.txt\n\n# 获取必要的依赖\n$ pip install pipreqs\n$ pipreqs .\n\n# 使用\n$ pip install -r requirements.txt\n</code></pre></div><h2 id="tar-file"><a class="header-anchor" href="#tar-file" aria-hidden="true">#</a> tar file</h2><p>获取 tar.gz 文件中的顶层目录的名称，使用下面简单的方式：</p><div class="language-"><pre><code>archive = tarfile.open(filepath, mode=&#39;r&#39;)\nprint os.path.commonprefix(archive.getnames())\n</code></pre></div><h2 id="zip-file"><a class="header-anchor" href="#zip-file" aria-hidden="true">#</a> zip file</h2><p>使用 zipfile 库，更加灵活的打包 zip 包。</p><div class="language-"><pre><code>from zipfile import ZipFile\n\nwith ZipFile(&#39;target.zip&#39;, &#39;w&#39;) as newzip:\n    newzip.write(&#39;directory_name&#39;)\n    newzip.write(&#39;file_name&#39;)\n</code></pre></div><p>使用 shutil 中的 make_archive 函数生成的包有点奇怪(?)，不如使用 zipfile 来的灵活。</p><h2 id="subprocess"><a class="header-anchor" href="#subprocess" aria-hidden="true">#</a> subprocess</h2><p>使用 subprocess 时，往往需要添加子进程中的环境变量，可以使用:</p><div class="language-"><pre><code>import subprocess, os\nmy_env = os.environ.copy()\nmy_env[&quot;PATH&quot;] = &quot;/usr/sbin:/sbin:&quot; + my_env[&quot;PATH&quot;]\nsubprocess.Popen(my_command, env=my_env)\n</code></pre></div><h2 id="sh"><a class="header-anchor" href="#sh" aria-hidden="true">#</a> sh</h2><p>sh is a full-fledged subprocess replacement for Python 2.6 - 3.8, PyPy and PyPy3 that allows you to call any program as if it were a function.</p><div class="language-"><pre><code>import sh\n# like command run in bash. $ sed -i &#39;s/a/A/g&#39; filename\nsh.sed([&#39;-i&#39;, f&#39;s/a/A/g&#39;, filename]}&#39;])\n</code></pre></div><h2 id="format"><a class="header-anchor" href="#format" aria-hidden="true">#</a> format</h2><p>python 中用于格式的操作，在格式化数字的时候，可以方便的控制小数点后的面位数。具体的可以参考[<a href="https://docs.python.org/3/library/string.html#format-examples" target="_blank" rel="noopener noreferrer">string format</a>]</p><div class="language-"><pre><code>&quot;{:.2f}&quot;.format(13.949999999999999)\n</code></pre></div><h2 id="listdir"><a class="header-anchor" href="#listdir" aria-hidden="true">#</a> listdir</h2><p>python 中遍历目录有好几种方式，不同的方式满足于不同的场景。</p><ul><li>os.listdir</li></ul><p>列举出当前目录下所有的文件，同时我们可以通过文件类型去进行过滤。比如：</p><div class="language-"><pre><code>import os \n\nfiles = [f for f in os.listdir(&#39;.&#39;) if os.path.isfile(f)]\ndirs = [d for d in os.listdir(&#39;.&#39;) if os.path.isdir(d)]\n</code></pre></div><ul><li>os.walk</li></ul><p>walk 一般会递归去获取当前目录下所有的文件包含子目录，需要通过指定一些配置来满足我们的需求。简单的使用如下：</p><div class="language-"><pre><code>import os\n\nfor root, dirs, files in os.walk(&#39;.&#39;, topdown=True):\n    dirs.clear()\n    for file in files:\n        print(file)\n</code></pre></div><p><code>dirs.clear()</code> 用于不递归遍历当前目录下的子目录。 如果不删除，则会显示当前目录下所有的文件包含子目录里面的文件。这需要结合具体的场景。</p><ul><li>find(shell command with subprocess)</li></ul><p>这种方式是结合了 shell 的一些特性，一般不得以的情况下才使用。</p>',43);t.render=function(a,i,t,s,n,o){return e(),r("div",null,[l])};export default t;export{i as __pageData};
