import{_ as n}from"./LinkItem.65bc6d8d.js";import{_ as a}from"./ShortHR.090ec3c7.js";import{_ as e}from"./app.449ba84e.js";import{h as s,o,a as t,w as c,b as l,k as r}from"./vendor.80607e96.js";const i=l("p",null,"记录 docker 的一些常用命令, 主要是在日常查询和定位问题的时候比较有帮助。以期望能在必要时提供一些帮助。这些内容大多是实践之后的记录，不是一篇 docker 使用手册的笔记。",-1),u=l("h2",{id:"设置无-sudo-使用"},[l("a",{class:"header-anchor",href:"#设置无-sudo-使用","aria-hidden":"true"},"#"),r(" 设置无 sudo 使用")],-1),p=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(),l("span",{class:"token function"},"usermod"),r(" -aG docker "),l("span",{class:"token environment constant"},"$USER"),r("\n")])],-1),d=l("h2",{id:"查看-docker-系统占用情况"},[l("a",{class:"header-anchor",href:"#查看-docker-系统占用情况","aria-hidden":"true"},"#"),r(" 查看 docker 系统占用情况")],-1),k=l("p",null,[r("其中 prune 也可以用 "),l("code",null,"docker image prune"),r(" 或者 "),l("code",null,"docker container prune"),r("。 如果很确认深度清理的话，可以增加 "),l("code",null,"-a"),r(" 选项。")],-1),h=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ docker system "),l("span",{class:"token function"},"df"),r("\n$ docker system events\n$ docker system info\n$ docker system prune\n")])],-1),g=l("p",null,[r("此外还可以通过 "),l("code",null,"docker network prune"),r(" 和 "),l("code",null,"docker volumes prune"),r(" 来清理相关的网络和卷的信息。")],-1),m=l("h2",{id:"设置重启策略"},[l("a",{class:"header-anchor",href:"#设置重启策略","aria-hidden":"true"},"#"),r(" 设置重启策略")],-1),b=l("p",null,[r("在创建 docker 容器时，可以指定 "),l("code",null,"--restart always"),r(" 来设置容器的重启策略。")],-1),f=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker run -d --restart always --name my-container busybox\n")])],-1),v=l("p",null,"可选的参数有：",-1),y=l("ul",null,[l("li",null,"no 默认值"),l("li",null,"on-failure[:max-retries]"),l("li",null,"always"),l("li",null,"unless-stopped")],-1),I=l("p",null,[r("此外我们可以通过 "),l("code",null,"docker update"),r(" 来更新容器的重启策略。")],-1),$=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker update --restart always my-container\n")])],-1),w=l("h2",{id:"设置容器使用-host-的时间和时区"},[l("a",{class:"header-anchor",href:"#设置容器使用-host-的时间和时区","aria-hidden":"true"},"#"),r(" 设置容器使用 host 的时间和时区")],-1),_=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("docker run -d "),l("span",{class:"token punctuation"},"\\"),r("\n  --name my_container "),l("span",{class:"token punctuation"},"\\"),r("\n  -v /etc/localtime:/etc/localtime:ro "),l("span",{class:"token punctuation"},"\\"),r("\n  -v /etc/timezone:/etc/timezone:ro "),l("span",{class:"token punctuation"},"\\"),r("\n  -e "),l("span",{class:"token assign-left variable"},"TZ"),l("span",{class:"token operator"},"="),l("span",{class:"token variable"},[l("span",{class:"token variable"},"$("),l("span",{class:"token function"},"cat"),r(" /etc/timezone"),l("span",{class:"token variable"},")")]),r(),l("span",{class:"token punctuation"},"\\"),r("\n  my_image\n")])],-1),N=l("h2",{id:"查看-container-的详情"},[l("a",{class:"header-anchor",href:"#查看-container-的详情","aria-hidden":"true"},"#"),r(" 查看 container 的详情")],-1),D=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker inspect  "),l("span",{class:"token operator"},"<"),r("container_name/container_id"),l("span",{class:"token operator"},">"),r("\n")])],-1),R=l("h2",{id:"查看-container-的内存使用情况"},[l("a",{class:"header-anchor",href:"#查看-container-的内存使用情况","aria-hidden":"true"},"#"),r(" 查看 container 的内存使用情况")],-1),E=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker stats\nCONTAINER ID    NAME    CPU %   MEM USAGE / LIMIT     MEM %    NET I/O           BLOCK I/O       PIDS\n306d9e2f8631   cuda     "),l("span",{class:"token number"},"0.00"),r("%   988KiB / "),l("span",{class:"token number"},"125"),r(".5GiB     "),l("span",{class:"token number"},"0.00"),r("%    0B / 0B           "),l("span",{class:"token number"},"6"),r(".61MB / 174MB   "),l("span",{class:"token number"},"2"),r("\n4e7decd2bcfc   goodbye  "),l("span",{class:"token number"},"0.00"),r("%   "),l("span",{class:"token number"},"1"),r(".93MiB / "),l("span",{class:"token number"},"125"),r(".5GiB    "),l("span",{class:"token number"},"0.00"),r("%    "),l("span",{class:"token number"},"6"),r(".97MB / "),l("span",{class:"token number"},"1"),r(".97kB   "),l("span",{class:"token number"},"1"),r(".17MB / 172kB   "),l("span",{class:"token number"},"4"),r("\n")])],-1),M=l("h2",{id:"查看-docker-自身的信息"},[l("a",{class:"header-anchor",href:"#查看-docker-自身的信息","aria-hidden":"true"},"#"),r(" 查看 docker 自身的信息")],-1),C=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker info\nContainers: "),l("span",{class:"token number"},"26"),r("\n Running: "),l("span",{class:"token number"},"26"),r("\n Paused: "),l("span",{class:"token number"},"0"),r("\n Stopped: "),l("span",{class:"token number"},"0"),r("\nImages: "),l("span",{class:"token number"},"19"),r("\nServer Version: "),l("span",{class:"token number"},"18.06"),r(".1-ce\nStorage Driver: overlay2\n Backing Filesystem: extfs\n Supports d_type: "),l("span",{class:"token boolean"},"true"),r("\n Native Overlay Diff: "),l("span",{class:"token boolean"},"true"),r("\nLogging Driver: json-file\nCgroup Driver: cgroupfs\nPlugins:\n Volume: "),l("span",{class:"token builtin class-name"},"local"),r("\n Network: bridge "),l("span",{class:"token function"},"host"),r(" macvlan null overlay\n Log: awslogs fluentd gcplogs gelf journald json-file logentries splunk syslog\nSwarm: inactive\nRuntimes: nvidia runc\nDefault Runtime: runc\n……\n")])],-1),O=l("h2",{id:"ubuntu-上查看-docker-日志"},[l("a",{class:"header-anchor",href:"#ubuntu-上查看-docker-日志","aria-hidden":"true"},"#"),r(" ubuntu 上查看 docker 日志")],-1),P=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" journalctl -fu docker.service\n")])],-1),T=l("h2",{id:"删除-image"},[l("a",{class:"header-anchor",href:"#删除-image","aria-hidden":"true"},"#"),r(" 删除 image")],-1),x=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker rmi "),l("span",{class:"token operator"},"<"),r("image-id"),l("span",{class:"token operator"},">"),r("\n")])],-1),L=l("h2",{id:"删除-container"},[l("a",{class:"header-anchor",href:"#删除-container","aria-hidden":"true"},"#"),r(" 删除 container")],-1),B=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker "),l("span",{class:"token function"},"rm"),r(),l("span",{class:"token operator"},"<"),r("container-id/container-name"),l("span",{class:"token operator"},">"),r("\n")])],-1),S=l("h2",{id:"查看指定容器的日志"},[l("a",{class:"header-anchor",href:"#查看指定容器的日志","aria-hidden":"true"},"#"),r(" 查看指定容器的日志")],-1),U=l("p",null,"每隔两秒查看一下指定容器的最后 10 行日志",-1),j=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker logs -f --tail"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"10"),r(" --until"),l("span",{class:"token operator"},"="),r("2s "),l("span",{class:"token operator"},"<"),r("container_name/container_id"),l("span",{class:"token operator"},">"),r(" \n")])],-1),Y=r("docker 官方文档"),A=l("h2",{id:"重新指定容器的-entry-point"},[l("a",{class:"header-anchor",href:"#重新指定容器的-entry-point","aria-hidden":"true"},"#"),r(" 重新指定容器的 entry_point")],-1),z=l("p",null,[r("在创建容器时，我们可以覆盖镜像原有的 entry_point 设置，一般我们是通过 "),l("code",null,"--entrypoint"),r(" 来指定。")],-1),V=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker run -d --entrypoint /bin/sh --name my-container busybox\n")])],-1),q=l("p",null,[r("注意 "),l("code",null,"--entrypoint"),r(" 后面只能加一个参数，一般我们可以传一个脚本，这样可以做到处理多个命令。")],-1),G=l("h2",{id:"提交一个容器的修改到一个新的镜像"},[l("a",{class:"header-anchor",href:"#提交一个容器的修改到一个新的镜像","aria-hidden":"true"},"#"),r(" 提交一个容器的修改到一个新的镜像")],-1),K=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" docker commit "),l("span",{class:"token operator"},"<"),r("container_name/container_id"),l("span",{class:"token operator"},">"),r(),l("span",{class:"token operator"},"<"),r("image_name"),l("span",{class:"token operator"},">"),r("\n")])],-1),H=r("简单的一些示例"),F=l("h2",{id:"清空-log"},[l("a",{class:"header-anchor",href:"#清空-log","aria-hidden":"true"},"#"),r(" 清空 log")],-1),J=l("p",null,"当我们的 log 文件变得很大时，我们想将其清空时，可以通过如下命令进行操作：",-1),Z=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token builtin class-name"},":"),r(),l("span",{class:"token operator"},">"),r(),l("span",{class:"token variable"},[l("span",{class:"token variable"},"$("),r("docker inspect --format"),l("span",{class:"token operator"},"="),r("`"),l("span",{class:"token punctuation"},"{"),l("span",{class:"token punctuation"},"{"),r(".LogPath"),l("span",{class:"token punctuation"},"}"),l("span",{class:"token punctuation"},"}"),r("` "),l("span",{class:"token operator"},"<"),r("container_name_or_id"),l("span",{class:"token operator"},">"),l("span",{class:"token variable"},")")]),r("\n")])],-1),W=l("p",null,[r("注意这边的 "),l("code",null,"format"),r(" 的反引号要改成单引号")],-1),Q=l("h2",{id:"安装-nvidia-toolkit"},[l("a",{class:"header-anchor",href:"#安装-nvidia-toolkit","aria-hidden":"true"},"#"),r(" 安装 nvidia toolkit")],-1),X=l("ul",null,[l("li",null,"添加相关的 gpg key")],-1),nn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[l("span",{class:"token function"},"curl"),r(" -s -L https://nvidia.github.io/nvidia-container-runtime/gpgkey "),l("span",{class:"token operator"},"|"),r(),l("span",{class:"token punctuation"},"\\"),r("\n  "),l("span",{class:"token function"},"sudo"),r(" apt-key "),l("span",{class:"token function"},"add"),r(" -\n"),l("span",{class:"token assign-left variable"},"distribution"),l("span",{class:"token operator"},"="),l("span",{class:"token variable"},[l("span",{class:"token variable"},"$("),l("span",{class:"token builtin class-name"},"."),r(" /etc/os-release"),l("span",{class:"token punctuation"},";"),l("span",{class:"token builtin class-name"},"echo"),r(" $ID$VERSION_ID"),l("span",{class:"token variable"},")")]),r("\n"),l("span",{class:"token function"},"curl"),r(" -s -L https://nvidia.github.io/nvidia-container-runtime/"),l("span",{class:"token variable"},"$distribution"),r("/nvidia-container-runtime.list "),l("span",{class:"token operator"},"|"),r(),l("span",{class:"token punctuation"},"\\"),r("\n  "),l("span",{class:"token function"},"sudo"),r(),l("span",{class:"token function"},"tee"),r(" /etc/apt/sources.list.d/nvidia-container-runtime.list\n"),l("span",{class:"token function"},"sudo"),r(),l("span",{class:"token function"},"apt-get"),r(" update\n")])],-1),an=l("ul",null,[l("li",null,"安装 runtime")],-1),en=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"apt-get"),r(),l("span",{class:"token function"},"install"),r(" nvidia-container-runtime\n")])],-1),sn=l("ul",null,[l("li",null,"重启 docker")],-1),on=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(" systemctl restart docker\n")])],-1),tn=r("Nvidia GPU 的支持"),cn=l("h2",{id:"清理和删除容器"},[l("a",{class:"header-anchor",href:"#清理和删除容器","aria-hidden":"true"},"#"),r(" 清理和删除容器")],-1),ln=l("p",null,[r("一般在启动一个容器时，我们可以通过指定 "),l("code",null,"--rm"),r(" 选项用来在容器退出时自动删除掉容器。这样可以在保证一些不重要的容器及时被清理掉。 除此之外，我们还可以使用 docker 命令来批量清理容器。")],-1),rn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},"$ docker system prune\n")],-1),un=l("h2",{id:"use-conda-in-dockerfile"},[l("a",{class:"header-anchor",href:"#use-conda-in-dockerfile","aria-hidden":"true"},"#"),r(" use conda in dockerfile")],-1),pn=l("p",null,"当我们在复制别人的 conda 环境到镜像中时，一般可以通过 environment.yml 文件完成。此时如果需要我们在镜像中启动 conda 环境时，可以通过如下的方式进行：",-1),dn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("FROM continuumio/miniconda3\n\nWORKDIR /app\n\n"),l("span",{class:"token comment"},"# Create the environment:"),r("\nCOPY environment.yml "),l("span",{class:"token builtin class-name"},"."),r("\nRUN conda "),l("span",{class:"token function"},"env"),r(" create -f environment.yml\n\n"),l("span",{class:"token comment"},"# Make RUN commands use the new environment:"),r("\n"),l("span",{class:"token environment constant"},"SHELL"),r(),l("span",{class:"token punctuation"},"["),l("span",{class:"token string"},'"conda"'),r(", "),l("span",{class:"token string"},'"run"'),r(", "),l("span",{class:"token string"},'"-n"'),r(", "),l("span",{class:"token string"},'"myenv"'),r(", "),l("span",{class:"token string"},'"/bin/bash"'),r(", "),l("span",{class:"token string"},'"-c"'),l("span",{class:"token punctuation"},"]"),r("\n\n"),l("span",{class:"token comment"},"# Demonstrate the environment is activated:"),r("\nRUN "),l("span",{class:"token builtin class-name"},"echo"),r(),l("span",{class:"token string"},'"Make sure flask is installed:"'),r("\nRUN python -c "),l("span",{class:"token string"},'"import flask"'),r("\n\n"),l("span",{class:"token comment"},"# The code to run when container is started:"),r("\nCOPY run.py "),l("span",{class:"token builtin class-name"},"."),r("\nENTRYPOINT "),l("span",{class:"token punctuation"},"["),l("span",{class:"token string"},'"conda"'),r(", "),l("span",{class:"token string"},'"run"'),r(", "),l("span",{class:"token string"},'"--no-capture-output"'),r(", "),l("span",{class:"token string"},'"-n"'),r(", "),l("span",{class:"token string"},'"myenv"'),r(", "),l("span",{class:"token string"},'"python"'),r(", "),l("span",{class:"token string"},'"run.py"'),l("span",{class:"token punctuation"},"]"),r("\n")])],-1),kn=l("p",null,"两种情况，如果后续的 RUN 命令时，可以通过 SHELL 先进行一个激活操作。另外则是在设置 ENTRYPOINT 时可以直接在命令行上完成环境的激活。",-1),hn=r(" 如何在 dockerfile 中激活 conda "),gn=l("h2",{id:"cmd-vs-entrypoint"},[l("a",{class:"header-anchor",href:"#cmd-vs-entrypoint","aria-hidden":"true"},"#"),r(" CMD vs. ENTRYPOINT")],-1),mn=l("p",null,"CMD: 此命令会在容器启动且 docker run 没有指定其他命令时运行 ENTRYPOINT: ENTRYPOINT 的 Exec 格式用于设置容器启动时要执行的命令及其参数，同时可通过CMD命令或者命令行参数提供额外的参数。ENTRYPOINT 中的参数始终会被使用，这是与 CMD 命令不同的一点.",-1),bn=l("blockquote",null,[l("p",null,"RUN. Mainly used to build images and install applications and packages. Builds a new layer over an existing image by committing the results. CMD. Sets default parameters that can be overridden from the Docker Command Line Interface (CLI) when a container is running. ENTRYPOINT. Default parameters that cannot be overridden when Docker Containers run with CLI parameters.")],-1),fn=l("h2",{id:"docker-stopped-container-reuse"},[l("a",{class:"header-anchor",href:"#docker-stopped-container-reuse","aria-hidden":"true"},"#"),r(" docker stopped container reuse")],-1),vn=l("p",null,[l("a",{href:"https://www.thorsten-hans.com/how-to-run-commands-in-stopped-docker-containers/",target:"_blank",rel:"noopener"},"https://www.thorsten-hans.com/how-to-run-commands-in-stopped-docker-containers/")],-1),yn=l("h2",{id:"导出-dockerfile"},[l("a",{class:"header-anchor",href:"#导出-dockerfile","aria-hidden":"true"},"#"),r(" 导出 Dockerfile")],-1),In=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ docker run -v /var/run/docker.sock:/var/run/docker.sock --rm chenzj/dfimage "),l("span",{class:"token operator"},"<"),r("image-id"),l("span",{class:"token operator"},">"),r("\n")])],-1),$n=l("p",null,"这里面除了 COPY 相关的命令通过文件的形式替代，可以正确的还原出原本的 dockerfile 格式。",-1),wn=r(" 从镜像中生成 Dockerfile "),_n=l("h2",{id:"cpu-限制相关"},[l("a",{class:"header-anchor",href:"#cpu-限制相关","aria-hidden":"true"},"#"),r(" CPU 限制相关")],-1),Nn=l("p",null,"参考资料：",-1),Dn=l("p",null,[l("a",{href:"https://www.uber.com/en-HK/blog/avoiding-cpu-throttling-in-a-containerized-environment/",target:"_blank",rel:"noopener"},"cpu set")],-1),Rn=l("h2",{id:"修改默认网段"},[l("a",{class:"header-anchor",href:"#修改默认网段","aria-hidden":"true"},"#"),r(" 修改默认网段")],-1),En=l("p",null,[r("打开 "),l("code",null,"/etc/docker/daemon.json"),r(" 在内部添加；")],-1),Mn=l("pre",{class:"language-json"},[l("code",{class:"language-json"},[l("span",{class:"token punctuation"},"{"),r("\n  "),l("span",{class:"token property"},'"default-address-pools"'),l("span",{class:"token operator"},":"),r("\n  "),l("span",{class:"token punctuation"},"["),r("\n    "),l("span",{class:"token punctuation"},"{"),l("span",{class:"token property"},'"base"'),l("span",{class:"token operator"},":"),l("span",{class:"token string"},'"10.10.0.0/16"'),l("span",{class:"token punctuation"},","),l("span",{class:"token property"},'"size"'),l("span",{class:"token operator"},":"),l("span",{class:"token number"},"24"),l("span",{class:"token punctuation"},"}"),r("\n  "),l("span",{class:"token punctuation"},"]"),r("\n"),l("span",{class:"token punctuation"},"}"),r("\n")])],-1),Cn=l("p",null,"指定好对应的 IP， 然后重启 docker 服务。",-1),On=l("pre",null,[l("code",null,"$ sudo systemctl restart docker.service\n")],-1),Pn=l("h2",{id:"修复-nvidia-smi-not-work"},[l("a",{class:"header-anchor",href:"#修复-nvidia-smi-not-work","aria-hidden":"true"},"#"),r(" 修复 nvidia-smi not work")],-1),Tn=l("blockquote",null,[l("p",null,"NVIDIA-SMI has failed because it couldn‘t communicate with the NVIDIA driver.")],-1),xn=l("p",null,"首先查看驱动和 cuda 是否都在",-1),Ln=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},"$ nvcc -h\n")],-1),Bn=l("p",null,"如果正常存在，则查看一下当前的驱动版本",-1),Sn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"ls"),r(" /usr/src "),l("span",{class:"token operator"},"|"),r(),l("span",{class:"token function"},"grep"),r(" nvidia\nnvidia-470.74\n")])],-1),Un=l("p",null,"根据输出的驱动版本，执行如下的命令，修复一下：",-1),jn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ "),l("span",{class:"token function"},"sudo"),r(),l("span",{class:"token function"},"apt-get"),r(),l("span",{class:"token function"},"install"),r(" dkms\n$ "),l("span",{class:"token function"},"sudo"),r(" dkms "),l("span",{class:"token function"},"install"),r(" -m nvidia -v "),l("span",{class:"token number"},"470.74"),r("  "),l("span",{class:"token comment"},"# version 根据上面的输出填写"),r("\n")])],-1),Yn=l("p",null,[l("a",{href:"https://cloud.tencent.com/developer/article/2338311",target:"_blank",rel:"noopener"},"reference")],-1),An=l("h2",{id:"golang-package-version-mistmatch"},[l("a",{class:"header-anchor",href:"#golang-package-version-mistmatch","aria-hidden":"true"},"#"),r(" golang package version mistmatch")],-1),zn=l("blockquote",null,[l("p",null,"Error response from daemon: client version 1.40 is too new. Maximum supported API version is 1.39")],-1),Vn=l("p",null,"此时的一个简单解决方案是:",-1),qn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[l("span",{class:"token builtin class-name"},"export"),r(),l("span",{class:"token assign-left variable"},"DOCKER_API_VERSION"),l("span",{class:"token operator"},"="),l("span",{class:"token number"},"1.39"),r("  "),l("span",{class:"token comment"},"# 该版本为期望的版本"),r("\n")])],-1),Gn=l("h2",{id:"删除-containerd-的镜像"},[l("a",{class:"header-anchor",href:"#删除-containerd-的镜像","aria-hidden":"true"},"#"),r(" 删除 containerd 的镜像")],-1),Kn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("$ ctr -n k8s.io i "),l("span",{class:"token function"},"rm"),r(),l("span",{class:"token variable"},[l("span",{class:"token variable"},"$("),r("ctr -n k8s.io i "),l("span",{class:"token function"},"ls"),r(" -q "),l("span",{class:"token operator"},"|"),r(),l("span",{class:"token function"},"grep"),r(" your_filter"),l("span",{class:"token variable"},")")]),r("\n")])],-1),Hn=l("h2",{id:"rootless-mode-docker-daemon-not-running-after-logging-back-in-ssh"},[l("a",{class:"header-anchor",href:"#rootless-mode-docker-daemon-not-running-after-logging-back-in-ssh","aria-hidden":"true"},"#"),r(" Rootless-mode Docker daemon not running after logging back in ssh")],-1),Fn=l("p",null,"需要做两步，第一步是：",-1),Jn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[r("systemctl --user "),l("span",{class:"token builtin class-name"},"enable"),r(" docker\n")])],-1),Zn=l("p",null,"第二步我们需要修改用户 linger 类型",-1),Wn=l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[l("span",{class:"token function"},"sudo"),r(" loginctl enable-linger xxx\n")])],-1),Qn={expose:[],setup(r){const Qn={title:"Docker In Use",date:"2021-03-19T00:00:00.000Z",author:"Linkang Chan",twitter:"JessEisen_LJ",description:"docker skill",public:!0,tag:"21F08 docker",meta:[{property:"og:title",content:"Docker In Use"},{property:"og:description",content:"docker skill"},{name:"description",content:"docker skill"}]};return s({title:"Docker In Use",meta:[{property:"og:title",content:"Docker In Use"},{property:"og:description",content:"docker skill"},{name:"description",content:"docker skill"}]}),(s,r)=>{const Xn=n,na=a,aa=e;return o(),t(aa,{frontmatter:Qn},{default:c((()=>[l("div",null,[i,u,p,d,k,h,g,m,b,f,v,y,I,$,w,_,N,D,R,E,M,C,O,P,T,x,L,B,S,U,j,l("p",null,[l(Xn,{text:"docker logs",url:"https://docs.docker.com/engine/reference/commandline/logs/"},{default:c((()=>[Y])),_:1})]),A,z,V,q,G,K,l("p",null,[l(Xn,{text:"docker commit 文档",url:"https://docs.docker.com/engine/reference/commandline/commit/#examples"},{default:c((()=>[H])),_:1})]),l(na),F,J,Z,W,l(na),Q,X,nn,an,en,sn,on,l("p",null,[l(Xn,{text:"docker gpu support 文档",url:"https://docs.docker.com/config/containers/resource_constraints/#gpu"},{default:c((()=>[tn])),_:1})]),cn,ln,rn,l(na),un,pn,dn,kn,l("p",null,[l(Xn,{text:"activate-conda-dockerfile",url:"https://pythonspeed.com/articles/activate-conda-dockerfile/"},{default:c((()=>[hn])),_:1})]),gn,mn,bn,fn,vn,yn,In,$n,l("p",null,[l(Xn,{text:"generate a dockerfile",url:"https://stackoverflow.com/questions/19104847/how-to-generate-a-dockerfile-from-an-image"},{default:c((()=>[wn])),_:1})]),_n,Nn,Dn,Rn,En,Mn,Cn,On,Pn,Tn,xn,Ln,Bn,Sn,Un,jn,Yn,An,zn,Vn,qn,Gn,Kn,Hn,Fn,Jn,Zn,Wn])])),_:1})}}};export default Qn;
