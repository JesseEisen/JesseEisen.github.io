import{_ as n}from"./Code.fee8bdde.js";import{_ as s}from"./LinkItem.65bc6d8d.js";import{_ as a}from"./app.252c1e4c.js";import{h as t,o,a as e,w as c,b as p,k as l}from"./vendor.80607e96.js";const u=p("p",null,"本文记录现代 Javascript 的一些学习笔记，从头到尾的全面学习下 javascript。 从文档上看，这个教程的质量和细节部分还是挺多的。记录的内容大多是我没有接触过，或者比较模糊的部分。",-1),k=p("h3",{id:"空值合并运算符"},[p("a",{class:"header-anchor",href:"#空值合并运算符","aria-hidden":"true"},"#"),l(" 空值合并运算符")],-1),r=l("??"),i=l(" 是用于在值为 "),d=p("code",null,"null/undefined",-1),m=l(" 这两个情况下返回第一个已经定义的值。 这个比 "),g=l("||"),y=l(" 行为不同的是：它对 "),h=p("code",null,'0/""',-1),f=l(" 等这些情况会认为是已定义的。 "),b=p("code",null,"??",-1),w=l(" 的优先级非常低，需要注意使用括号。"),j=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" firstName "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"null"),l("\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" secondname "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token string"},"''"),l("\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" c "),p("span",{class:"token operator"},"="),l(" secondname "),p("span",{class:"token operator"},"??"),l(),p("span",{class:"token string"},"'me?'"),l("\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(" c\n"),p("span",{class:"token string"},"''"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" d "),p("span",{class:"token operator"},"="),l(" firstName "),p("span",{class:"token operator"},"??"),l(),p("span",{class:"token string"},"'me!'"),l("\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(" d\n"),p("span",{class:"token string"},"'me!'"),l("\n"),p("span",{class:"token operator"},">"),l("\n")])],-1),v=p("p",null,"同时可以通过多个串起来使用：",-1),S=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" d "),p("span",{class:"token operator"},"="),l(" firstName "),p("span",{class:"token operator"},"??"),l(),p("span",{class:"token string"},"'me!'"),l("\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(" d\n"),p("span",{class:"token string"},"'me!'"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" e"),p("span",{class:"token operator"},"="),p("span",{class:"token keyword"},"null"),l("\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" g "),p("span",{class:"token operator"},"="),l(" e "),p("span",{class:"token operator"},"??"),l(" firstName "),p("span",{class:"token operator"},"??"),l(" secondname "),p("span",{class:"token operator"},"??"),l(" d\n"),p("span",{class:"token keyword"},"undefined"),l("\n"),p("span",{class:"token operator"},">"),l(" g\n"),p("span",{class:"token string"},"''"),l("\n"),p("span",{class:"token operator"},">"),l("\n")])],-1),O=p("p",null,[l("这边就会返回 "),p("code",null,"secondname"),l(" 这个非空的值。")],-1),J=p("h3",{id:"函数"},[p("a",{class:"header-anchor",href:"#函数","aria-hidden":"true"},"#"),l(" 函数")],-1),N=p("ul",null,[p("li",null,[l("不要在 "),p("code",null,"return"),l(" 与返回值之间添加新行，这会导致 return 变成单行指令，返回空置；")])],-1),x=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token comment"},"// bad case"),l("\n"),p("span",{class:"token keyword"},"return"),l("   "),p("span",{class:"token comment"},"// will be treat as return;"),l("\n  "),p("span",{class:"token punctuation"},"("),l("a "),p("span",{class:"token operator"},"+"),l(" b"),p("span",{class:"token punctuation"},")"),l("\n\n"),p("span",{class:"token comment"},"// optimized"),l("\n"),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token punctuation"},"("),l("\n    a "),p("span",{class:"token operator"},"+"),l(" b\n"),p("span",{class:"token punctuation"},")"),l("\n")])],-1),M=p("ul",null,[p("li",null,[l("函数表达式后尽量增加一个 "),p("code",null,";")])],-1),D=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token function-variable function"},"add"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[l("a"),p("span",{class:"token punctuation"},","),l(" b")]),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"return"),l(" a "),p("span",{class:"token operator"},"+"),l(" b"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n")])],-1),I=p("p",null,"函数表达式是在代码执行到达时被创建，并且仅从那一刻起可用。",-1),_=p("h3",{id:"代码质量"},[p("a",{class:"header-anchor",href:"#代码质量","aria-hidden":"true"},"#"),l(" 代码质量")],-1),T=p("ul",null,[p("li",null,[p("code",null,"debugger;"),l(" 单独的语句会让调试器在此暂停住，并且不会执行下一条语句。")]),p("li",null,"当处于调试模式时，在代码中的某一行上右键，在显示的关联菜单（context menu）中点击一个非常有用的名为 “Continue to here” 的选项。")],-1),P=l(" Chrome dev tool 的相关文档 "),C=p("h3",{id:"文档注释"},[p("a",{class:"header-anchor",href:"#文档注释","aria-hidden":"true"},"#"),l(" 文档注释")],-1),A=l(" 用于注释 js 函数的一个中格式，搭配工具可以生成 html 的文档 "),Y=l(" 用于自动生成 js 注释文档的工具 "),F=p("h3",{id:"语言规范"},[p("a",{class:"header-anchor",href:"#语言规范","aria-hidden":"true"},"#"),l(" 语言规范")],-1),q=l("查看语言特性的当前支持状态"),z=p("h3",{id:"object"},[p("a",{class:"header-anchor",href:"#object","aria-hidden":"true"},"#"),l(" Object")],-1),H=p("ul",null,[p("li",null,"多单词的 key 需要使用引号包裹")],-1),$=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" obj "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n    a"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l("\n    b"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l("\n    "),p("span",{class:"token string"},'"hello world"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("obj"),p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'hello world'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 3"),l("\nkey"),p("span",{class:"token operator"},"="),p("span",{class:"token string"},"'hello world'"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("obj"),p("span",{class:"token punctuation"},"["),l("key"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 3"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("obj"),p("span",{class:"token punctuation"},"."),l("key"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// undefined"),l("\n")])],-1),E=p("ul",null,[p("li",null,"当数字 0 被用作对象的属性的键时，会被转换为字符串 “0”"),p("li",null,"整数属性会被排序，其他的属性会按照创建的顺序排序")],-1),L=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" codes "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token string"},'"49"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"Germany"'),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token string"},'"41"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"Switzerland"'),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token string"},'"44"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"Great Britain"'),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token comment"},"// ..,"),l("\n  "),p("span",{class:"token string"},'"1"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"USA"'),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n\n"),p("span",{class:"token keyword"},"for"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"let"),l(" code "),p("span",{class:"token keyword"},"in"),l(" codes"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token function"},"alert"),p("span",{class:"token punctuation"},"("),l("code"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// 1, 41, 44, 49"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n")])],-1),R=p("ul",null,[p("li",null,[p("p",null,"使用 const 声明的对象也是可以被修改的")]),p("li",null,[p("p",null,"Object.assign 来做所谓的“浅拷贝”, 因为嵌套的对象同样存在引用")])],-1),W=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"const"),l(" abc "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token string"},"'a'"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'c'"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token string"},"'d'"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token operator"},">"),l(" abc\n"),p("span",{class:"token punctuation"},"{"),l(" a"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(" c"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"{"),l(" d"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),l(),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token operator"},">"),l(" abcd "),p("span",{class:"token operator"},"="),l(" Object"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"assign"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l(" abc")]),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"{"),l(" a"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(" c"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"{"),l(" d"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),l(),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token operator"},">"),l(" abcd"),p("span",{class:"token punctuation"},"."),l("c"),p("span",{class:"token punctuation"},"."),l("d"),p("span",{class:"token operator"},"="),p("span",{class:"token number"},"4"),l("\n"),p("span",{class:"token number"},"4"),l("\n"),p("span",{class:"token operator"},">"),l(" abc\n"),p("span",{class:"token punctuation"},"{"),l(" a"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(" c"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"{"),l(" d"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"4"),l(),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token operator"},">"),l("\n")])],-1),Z=p("h3",{id:"构造函数"},[p("a",{class:"header-anchor",href:"#构造函数","aria-hidden":"true"},"#"),l(" 构造函数")],-1),G=p("p",null,"常规来说，它们也是普通的函数，不过有如下的规定：",-1),U=p("ul",null,[p("li",null,"它们的命名以大写字母开头。"),p("li",null,"它们只能由 “new” 操作符来执行。")],-1),B=p("p",null,[l("JS 中形如 "),p("code",null,"Date"),l(" 或者 "),p("code",null,"Set"),l(" 等等的构造函数，都需要使用 "),p("code",null,"new"),l(" 操作符来创建。 通常，构造器没有 return 语句。它们的任务是将所有必要的东西写入 this，并自动转换为结果。但是，如果这有一个 return 语句，那么规则就简单了：")],-1),K=p("pre",{class:"language-bash"},[p("code",{class:"language-bash"},[l("+ 如果 "),p("span",{class:"token builtin class-name"},"return"),l(" 返回的是一个对象，则返回这个对象，而不是 this。\n+ 如果 "),p("span",{class:"token builtin class-name"},"return"),l(" 返回的是一个原始类型，则忽略。\n")])],-1),Q=p("p",null,"一个例子：",-1),V=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"Person"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},"name"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("name "),p("span",{class:"token operator"},"="),l(" name"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token string"},'"newname"'),l(),p("span",{class:"token operator"},":"),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("name "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\np "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Person"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'John'"),p("span",{class:"token punctuation"},")"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("p"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// { newname: 'John' }"),l("\n\n"),p("span",{class:"token comment"},"// normal variable"),l("\n"),p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"Person2"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},"name"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("name "),p("span",{class:"token operator"},"="),l(" name"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token keyword"},"let"),l(" age "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"18"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token keyword"},"return"),l(" age"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\np2 "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Person2"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'John'"),p("span",{class:"token punctuation"},")"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("p2"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// { name: 'John' }"),l("\n")])],-1),X=p("h3",{id:"可选链"},[p("a",{class:"header-anchor",href:"#可选链","aria-hidden":"true"},"#"),l(" 可选链")],-1),nn=p("p",null,[p("code",null,"?."),l(" 这个一般用在判断一个 object 的属性是否存在，如果存在，则返回这个属性的值，否则返回 undefined。 所谓的存在一般指的是这个属性是 "),p("code",null,"非 null/undefined"),l(" 的。")],-1),sn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[l("ret "),p("span",{class:"token operator"},"="),l(" a"),p("span",{class:"token operator"},"?."),l("b"),p("span",{class:"token operator"},"?."),l("c"),p("span",{class:"token operator"},"?."),l("d\n")])],-1),an=p("p",null,[l("这可以省去大部分的重复判断代码。除此之外还有 "),p("code",null,"?.()"),l(" 和 "),p("code",null,"?.[]"),l(" 这两个变体。 这些是可以用于删除和读取的，但是不能用于写入。")],-1),tn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" userAdmin "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token function"},"admin"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token function"},"alert"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"I am admin"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token keyword"},"let"),l(" userGuest "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\nuserAdmin"),p("span",{class:"token punctuation"},"."),l("admin"),p("span",{class:"token operator"},"?."),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// I am admin"),l("\nuserGuest"),p("span",{class:"token punctuation"},"."),l("admin"),p("span",{class:"token operator"},"?."),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// 啥都没有（没有这样的方法）"),l("\n\n"),p("span",{class:"token comment"},"// 可选 key"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(" user "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"null"),l("\n\nuser"),p("span",{class:"token operator"},"?."),p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'helloworld'"),p("span",{class:"token punctuation"},"]"),l(),p("span",{class:"token comment"},"// undefined"),l("\n"),p("span",{class:"token keyword"},"delete"),l(" user"),p("span",{class:"token operator"},"?."),l("key "),p("span",{class:"token comment"},"// 此处不存在key，所以不会删除，但不会报错"),l("\n\n")])],-1),on=p("p",null,[l("注意以上再不存在时均返回 "),p("code",null,"undefined"),l("。")],-1),en=p("h3",{id:"symbol"},[p("a",{class:"header-anchor",href:"#symbol","aria-hidden":"true"},"#"),l(" Symbol")],-1),cn=p("p",null,[p("code",null,"Symbol"),l(" 表示唯一的标识符。可以用于在 object 中，作为 object 的属性名，但是它不会被转换成字符串，是属于独立的类型。 如果想要获取他的定义或者是值，使用如下：")],-1),pn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" id "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token function"},"Symbol"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"id"'),p("span",{class:"token punctuation"},")"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("id"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"toString"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// Symbol(id)"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("id"),p("span",{class:"token punctuation"},"."),l("description"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// id"),l("\n")])],-1),ln=p("p",null,"symbol 的隐藏属性可以让我们安全的在第三方的结构里面增加新的key。 比如：",-1),un=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" id "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token function"},"Symbol"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"id"'),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token keyword"},"let"),l(" user "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n    name"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"John"'),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\nuser"),p("span",{class:"token punctuation"},"["),l("id"),p("span",{class:"token punctuation"},"]"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"123"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("usr"),p("span",{class:"token punctuation"},"["),l("id"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 123"),l("\n")])],-1),kn=p("ul",null,[p("li",null,[l("在 "),p("code",null,"for...in"),l(" 循环中，Symbol 属性会被忽略。")]),p("li",null,[l("在 "),p("code",null,"Object.keys()"),l(" 中，Symbol 属性会被忽略。")]),p("li",null,[l("在 "),p("code",null,"Object.assing()"),l(" 中，Symbol 属性会被复制。")])],-1),rn=p("h4",{id:"全局-symbol"},[p("a",{class:"header-anchor",href:"#全局-symbol","aria-hidden":"true"},"#"),l(" 全局 symbol")],-1),dn=p("ul",null,[p("li",null,[l("使用 "),p("code",null,'Symbol.for("xxx")'),l(" 来获取全局 symbol。 如果不存在就创建一个新的。存在的就直接返回。")]),p("li",null,[l("使用 "),p("code",null,'Symbol.keyFor("xxx")'),l(" 来获取 symbol 的名字")])],-1),mn=p("blockquote",null,[p("p",null,"从技术上说，Symbol 不是 100% 隐藏的。有一个内建方法 Object.getOwnPropertySymbols(obj) 允许我们获取所有的 Symbol。还有一个名为 Reflect.ownKeys(obj) 的方法可以返回一个对象的 所有 键，包括 Symbol。所以它们并不是真正的隐藏。但是大多数库、内建方法和语法结构都没有使用这些方法。")],-1),gn=p("h3",{id:"primitive"},[p("a",{class:"header-anchor",href:"#primitive","aria-hidden":"true"},"#"),l(" primitive")],-1),yn=p("p",null,[l("可以使用 "),p("code",null,"Symbol.primitive"),l(" 的内建 symbol 用来转换方法命名，这个类似于将 object 变成可以处理不同场景下的情况。")],-1),hn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" user "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  name"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"John"'),p("span",{class:"token punctuation"},","),l("\n  money"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1000"),p("span",{class:"token punctuation"},","),l("\n\n  "),p("span",{class:"token punctuation"},"["),l("Symbol"),p("span",{class:"token punctuation"},"."),l("toPrimitive"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},"hint"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token function"},"alert"),p("span",{class:"token punctuation"},"("),p("span",{class:"token template-string"},[p("span",{class:"token template-punctuation string"},"`"),p("span",{class:"token string"},"hint: "),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),l("hint"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token template-punctuation string"},"`")]),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token keyword"},"return"),l(" hint "),p("span",{class:"token operator"},"=="),l(),p("span",{class:"token string"},'"string"'),l(),p("span",{class:"token operator"},"?"),l(),p("span",{class:"token template-string"},[p("span",{class:"token template-punctuation string"},"`"),p("span",{class:"token string"},'{name: "'),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("name"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token string"},'"}'),p("span",{class:"token template-punctuation string"},"`")]),l(),p("span",{class:"token operator"},":"),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("money"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n\n"),p("span",{class:"token function"},"alert"),p("span",{class:"token punctuation"},"("),l("user"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},'// hint: string -> {name: "John"}'),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"+"),l("user"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// hint: number -> 1000"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("user "),p("span",{class:"token operator"},"+"),l(),p("span",{class:"token number"},"500"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// hint: default -> 1500"),l("\n")])],-1),fn=p("p",null,"默认情况下，普通对象具有 toString 和 valueOf 方法：",-1),bn=p("ul",null,[p("li",null,"toString 方法返回一个字符串 “[object Object]”。"),p("li",null,"valueOf 方法返回对象自身。")],-1),wn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" user "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("name"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"john"'),p("span",{class:"token punctuation"},"}"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("user"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"valueOf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},'// {name: "john"}'),l("\n")])],-1),jn=p("p",null,[l("此时我们可以重写 "),p("code",null,"toString"),l(" 和 "),p("code",null,"valueOf"),l(" 方法")],-1),vn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" user "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  name"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"john"'),p("span",{class:"token punctuation"},","),l("\n  value"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"500"),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token function"},"toString"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token template-string"},[p("span",{class:"token template-punctuation string"},"`"),p("span",{class:"token string"},'{name: "'),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("name"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token string"},'"}'),p("span",{class:"token template-punctuation string"},"`")]),l("\n  "),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token function"},"valueOf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("value\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token function"},"alert"),p("span",{class:"token punctuation"},"("),l("user"),p("span",{class:"token punctuation"},")"),l("  "),p("span",{class:"token comment"},'// {name: "John"}'),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("user "),p("span",{class:"token operator"},"+"),l(),p("span",{class:"token number"},"500"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 1000"),l("\n\n")])],-1),Sn=p("h3",{id:"数字类型"},[p("a",{class:"header-anchor",href:"#数字类型","aria-hidden":"true"},"#"),l(" 数字类型")],-1),On=p("p",null,[p("code",null,"toString(base)"),l(" 返回当前数字以 base 形式的字符串。")],-1),Jn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" number "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"100"),l("\n"),p("span",{class:"token number"},"100"),l("\n"),p("span",{class:"token operator"},">"),l(" number"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"toString"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token string"},"'1100100'"),l("\n"),p("span",{class:"token operator"},">"),l(" number"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"toString"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"16"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token string"},"'64'"),l("\n"),p("span",{class:"token operator"},">"),l("\n")])],-1),Nn=p("p",null,[l("同样的当我们将字符串的数字变成数字时，"),p("code",null,"parseInt"),l(" 和 "),p("code",null,"parseFloat"),l(" 可以帮助我们。不过这 "),p("code",null,"parseInt"),l(" 拥有第二个参数，用来制定进制。")],-1),xn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" anumber "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token string"},"'100'"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),l("anumber"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 100"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token function"},"parseInt"),p("span",{class:"token punctuation"},"("),l("anumber"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 4, 将 100 看成是二进制的"),l("\n")])],-1),Mn=p("h3",{id:"string"},[p("a",{class:"header-anchor",href:"#string","aria-hidden":"true"},"#"),l(" String")],-1),Dn=p("p",null,[l("字符串的 "),p("code",null,"indexOf"),l(" 的返回值可以使用一个按位与的小技巧来判断。如下：")],-1),In=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" str "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token string"},'"hello world"'),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token keyword"},"if"),p("span",{class:"token punctuation"},"("),p("span",{class:"token operator"},"~"),l("str"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"indexOf"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"o"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  console"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"find it"'),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n")])],-1),_n=p("p",null,[p("code",null,"~"),l(" 就是按位取反， 所以 "),p("code",null,"~n"),l(" 等价于 "),p("code",null,"-(n+1)"),l("。 也就是说 "),p("code",null,"~-1"),l(" = 0。 0 在 js 中是表示 falsy 值的。 "),p("strong",null,"不过这个技巧不太建议使用"),l("，因为有一定的局限性，且我们可以使用 "),p("code",null,"includes"),l(" 来替代。")],-1),Tn=p("p",null,"一些常用的方法的总结：",-1),Pn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},"|"),l(" 方法 ｜ 选择方式 ｜ 负数参数 "),p("span",{class:"token operator"},"|"),l("\n"),p("span",{class:"token operator"},"|"),l(),p("span",{class:"token operator"},"--"),p("span",{class:"token operator"},"--"),l(),p("span",{class:"token operator"},"|"),l(),p("span",{class:"token operator"},"--"),p("span",{class:"token operator"},"--"),l(),p("span",{class:"token operator"},"|"),l(),p("span",{class:"token operator"},"--"),p("span",{class:"token operator"},"--"),l(),p("span",{class:"token operator"},"|"),l("\n"),p("span",{class:"token operator"},"|"),l(),p("span",{class:"token function"},"slice"),p("span",{class:"token punctuation"},"("),l("start"),p("span",{class:"token punctuation"},","),l(" end"),p("span",{class:"token punctuation"},")"),l("\t"),p("span",{class:"token operator"},"|"),l(" 从 start 到 end（不含 end）"),p("span",{class:"token operator"},"|"),l(" \t允许 "),p("span",{class:"token operator"},"|"),l("\n"),p("span",{class:"token operator"},"|"),l(),p("span",{class:"token function"},"substring"),p("span",{class:"token punctuation"},"("),l("start"),p("span",{class:"token punctuation"},","),l(" end"),p("span",{class:"token punctuation"},")"),l("\t"),p("span",{class:"token operator"},"|"),l(" start 与 end 之间（包括 start，但不包括 end）"),p("span",{class:"token operator"},"|"),l(" \t负值代表 "),p("span",{class:"token number"},"0"),l(),p("span",{class:"token operator"},"|"),l("\n"),p("span",{class:"token operator"},"|"),l(),p("span",{class:"token function"},"substr"),p("span",{class:"token punctuation"},"("),l("start"),p("span",{class:"token punctuation"},","),l(" length"),p("span",{class:"token punctuation"},")"),l("\t"),p("span",{class:"token operator"},"|"),l(" 从 start 开始获取长为 length 的字符串\t"),p("span",{class:"token operator"},"|"),l(" 允许 start 为负数 "),p("span",{class:"token operator"},"|"),l(" \n")])],-1),Cn=p("h3",{id:"array"},[p("a",{class:"header-anchor",href:"#array","aria-hidden":"true"},"#"),l(" array")],-1),An=p("p",null,"循环遍历数组可以有如下两种方式：",-1),Yn=p("ul",null,[p("li",null,[p("code",null,"for (let i=0; i<arr.length; i++)"),l(" — 运行得最快，可兼容旧版本浏览器。")]),p("li",null,[p("code",null,"for (let item of arr)"),l(" — 现代语法，只能访问 items。")]),p("li",null,[p("code",null,"for (let i in arr)"),l(" — 永远不要用这个。")])],-1),Fn=p("p",null,[l("数组默认有一个 "),p("code",null,"toString"),l(" 的操作。所以我们可以如下操作：")],-1),qn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" a "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token function"},"String"),p("span",{class:"token punctuation"},"("),l("a"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token string"},"'1,2,3,4'"),l("\n")])],-1),zn=p("h4",{id:"splice-start-deletecount-elem1-…-elemn"},[p("a",{class:"header-anchor",href:"#splice-start-deletecount-elem1-…-elemn","aria-hidden":"true"},"#"),l(" splice(start[, deleteCount, elem1, …, elemN])")],-1),Hn=p("ul",null,[p("li",null,[l("第一个参数表示 "),p("code",null,"start"),l(" 的位置；可以是负数，也可以是 0 等等；")]),p("li",null,"第二个参数表示要删除多少个元素，可以是 0；"),p("li",null,"往后的参数表示需要插入的元素，从 start 的位置之后开始。")],-1),$n=p("h4",{id:"concat"},[p("a",{class:"header-anchor",href:"#concat","aria-hidden":"true"},"#"),l(" concat")],-1),En=p("p",null,"连接多个数组，如果一个 object 是可以被看作数组时，也是可以使用：",-1),Ln=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" arr "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" obj "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n"),p("span",{class:"token operator"},"..."),l(),p("span",{class:"token string"},'"index"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token operator"},"..."),l(),p("span",{class:"token string"},'"array"'),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token operator"},"..."),l(),p("span",{class:"token punctuation"},"["),l("Symbol"),p("span",{class:"token punctuation"},"."),l("isConcatSpreadable"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token boolean"},"true"),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token operator"},"..."),l(" length"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),l(),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token operator"},">"),l(" arr"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"concat"),p("span",{class:"token punctuation"},"("),l("obj"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"["),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token operator"},"<"),p("span",{class:"token number"},"2"),l(" empty items"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" arrayLike "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n"),p("span",{class:"token operator"},"..."),l("   "),p("span",{class:"token number"},"0"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"something"'),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token operator"},"..."),l("   "),p("span",{class:"token number"},"1"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"else"'),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token operator"},"..."),l("   "),p("span",{class:"token punctuation"},"["),l("Symbol"),p("span",{class:"token punctuation"},"."),l("isConcatSpreadable"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token boolean"},"true"),p("span",{class:"token punctuation"},","),l("\n"),p("span",{class:"token operator"},"..."),l("   length"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),l("\n"),p("span",{class:"token operator"},"..."),l(),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token operator"},">"),l(" arr"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"concat"),p("span",{class:"token punctuation"},"("),l("arrayLike"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"["),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'something'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'else'"),l(),p("span",{class:"token punctuation"},"]"),l("\n")])],-1),Rn=p("h4",{id:"搜索"},[p("a",{class:"header-anchor",href:"#搜索","aria-hidden":"true"},"#"),l(" 搜索")],-1),Wn=p("ul",null,[p("li",null,[p("code",null,"arr.indexOf(item, from)"),l(" 从索引 from 开始搜索 item，如果找到则返回索引，否则返回 -1。")]),p("li",null,[p("code",null,"arr.lastIndexOf(item, from)"),l(" —— 和上面相同，只是从右向左搜索。")]),p("li",null,[p("code",null,"arr.includes(item, from)"),l(" —— 从索引 from 开始搜索 item，如果找到则返回 true（译注：如果没找到，则返回 false）。")])],-1),Zn=p("h4",{id:"find-findindex"},[p("a",{class:"header-anchor",href:"#find-findindex","aria-hidden":"true"},"#"),l(" find/findIndex")],-1),Gn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" result "),p("span",{class:"token operator"},"="),l(" arr"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"find"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"function"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[l("item"),p("span",{class:"token punctuation"},","),l(" index"),p("span",{class:"token punctuation"},","),l(" array")]),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token comment"},"// 如果返回 true，则返回 item 并停止迭代"),l("\n  "),p("span",{class:"token comment"},"// 对于假值（falsy）的情况，则返回 undefined"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n")])],-1),Un=p("p",null,[l("数组可以拍平，一般是 "),p("code",null,"flat"),l("。")],-1),Bn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"var"),l(" arr1 "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),l("\narr1"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"flat"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token comment"},"// [1, 2, 3, 4]"),l("\n\n"),p("span",{class:"token keyword"},"var"),l(" arr2 "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"5"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"6"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),l("\narr2"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"flat"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token comment"},"// [1, 2, 3, 4, [5, 6]]"),l("\n\n"),p("span",{class:"token keyword"},"var"),l(" arr3 "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"5"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"6"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),l("\narr3"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"flat"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6]"),l("\n\n"),p("span",{class:"token comment"},"//使用 Infinity，可展开任意深度的嵌套数组"),l("\n"),p("span",{class:"token keyword"},"var"),l(" arr4 "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"5"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"6"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"7"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"8"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"9"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"10"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},";"),l("\narr4"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"flat"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"Infinity"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token comment"},"// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"),l("\n")])],-1),Kn=p("p",null,"具体我们可以参考：",-1),Qn=l("包含使用和相关的替代方案"),Vn=p("p",null,[l("此外还有一个小技巧，"),p("code",null,"Array"),l(" 和 "),p("code",null,"Array.of"),l("：")],-1),Xn=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token function"},"Array"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"7"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"["),l(),p("span",{class:"token operator"},"<"),p("span",{class:"token number"},"7"),l(" empty items"),p("span",{class:"token operator"},">"),l(),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token operator"},">"),l(" Array"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"of"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"7"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"["),l(),p("span",{class:"token number"},"7"),l(),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token operator"},">"),l(" Array"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"of"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"null"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"["),l(),p("span",{class:"token keyword"},"null"),l(),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token operator"},">"),l(" Array"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"of"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"undefined"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"["),l(),p("span",{class:"token keyword"},"undefined"),l(),p("span",{class:"token punctuation"},"]"),l("\n")])],-1),ns=p("h3",{id:"迭代"},[p("a",{class:"header-anchor",href:"#迭代","aria-hidden":"true"},"#"),l(" 迭代")],-1),ss=p("p",null,"通过 [Symbol.iterator]` 实现 range",-1),as=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" range "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token keyword"},"from"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l("\n  to"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"5"),p("span",{class:"token punctuation"},","),l("\n\n  "),p("span",{class:"token punctuation"},"["),l("Symbol"),p("span",{class:"token punctuation"},"."),l("iterator"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("current "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("from"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l("\n\n  "),p("span",{class:"token function"},"next"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"if"),l(),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("current "),p("span",{class:"token operator"},"<="),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("to"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n      "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token punctuation"},"{"),l(" done"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token boolean"},"false"),p("span",{class:"token punctuation"},","),l(" value"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("current"),p("span",{class:"token operator"},"++"),l(),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token keyword"},"else"),l(),p("span",{class:"token punctuation"},"{"),l("\n      "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token punctuation"},"{"),l(" done"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token boolean"},"true"),l(),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n    "),p("span",{class:"token punctuation"},"}"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n\n"),p("span",{class:"token keyword"},"for"),l(),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"let"),l(" num "),p("span",{class:"token keyword"},"of"),l(" range"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  console"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("num"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// 1, 然后是 2, 3, 4, 5"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n")])],-1),ts=p("ul",null,[p("li",null,[p("code",null,"Iterable"),l(" 如上所述，是实现了 Symbol.iterator 方法的对象。")]),p("li",null,[p("code",null,"Array-like"),l(" 是有索引和 length 属性的对象，所以它们看起来很像数组。")])],-1),os=p("p",null,[l("可以使用 "),p("code",null,"Array.from "),l(" 对一个 string 类型的变量转换成 array。 比如：")],-1),es=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token operator"},">"),l(),p("span",{class:"token keyword"},"let"),l(" chars "),p("span",{class:"token operator"},"="),l(" Array"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"from"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"hello world"'),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token operator"},">"),l(" chars\n"),p("span",{class:"token punctuation"},"["),l("\n  "),p("span",{class:"token string"},"'h'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'e'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'l'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'l'"),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token string"},"'o'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"' '"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'w'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'o'"),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token string"},"'r'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'l'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'d'"),l("\n"),p("span",{class:"token punctuation"},"]"),l("\n")])],-1),cs=p("h3",{id:"map"},[p("a",{class:"header-anchor",href:"#map","aria-hidden":"true"},"#"),l(" Map")],-1),ps=p("ul",null,[p("li",null,[p("code",null,"new Map()"),l(" —— 创建 map。")]),p("li",null,[p("code",null,"map.set(key, value)"),l(" —— 根据键存储值。")]),p("li",null,[p("code",null,"map.get(key)"),l(" —— 根据键来返回值，如果 map 中不存在对应的 key，则返回 undefined。")]),p("li",null,[p("code",null,"map.has(key)"),l(" —— 如果 key 存在则返回 true，否则返回 false。")]),p("li",null,[p("code",null,"map.delete(key)"),l(" —— 删除指定键的值。")]),p("li",null,[p("code",null,"map.clear()"),l(" —— 清空 map。")]),p("li",null,[p("code",null,"map.size"),l(" —— 返回当前元素个数。")])],-1),ls=p("blockquote",null,[p("p",null,[l("map[key] 不是使用 Map 的正确方式。 应当使用 "),p("code",null,"set"),l(" 和 "),p("code",null,"get")])],-1),us=p("h4",{id:"map-迭代"},[p("a",{class:"header-anchor",href:"#map-迭代","aria-hidden":"true"},"#"),l(" map 迭代")],-1),ks=p("p",null,"如果要在 map 里使用循环，可以使用以下三个方法：",-1),rs=p("ul",null,[p("li",null,[p("code",null,"map.keys()"),l(" —— 遍历并返回所有的键（returns an iterable for keys），")]),p("li",null,[p("code",null,"map.values()"),l(" —— 遍历并返回所有的值（returns an iterable for values），")]),p("li",null,[p("code",null,"map.entries()"),l(" —— 遍历并返回所有的实体（returns an iterable for entries）[key, value]，for…of 在默认情况下使用的就是这个。")])],-1),is=p("p",null,"此外还有两个比较方便的方法，用于 map 和 object 之间的转换",-1),ds=p("ul",null,[p("li",null,"Object.fromEntries 将 map 转换成 Object"),p("li",null,[l("Object.entries 生成 "),p("code",null,"[[key, value], [key, value]]"),l(" 可以用于创建 map")])],-1),ms=p("h3",{id:"set"},[p("a",{class:"header-anchor",href:"#set","aria-hidden":"true"},"#"),l(" Set")],-1),gs=p("ul",null,[p("li",null,[p("code",null,"new Set(iterable)"),l(" —— 创建一个 set，如果提供了一个 iterable 对象（通常是数组），将会从数组里面复制值到 set 中。")]),p("li",null,[p("code",null,"set.add(value)"),l(" —— 添加一个值，返回 set 本身")]),p("li",null,[p("code",null,"set.delete(value)"),l(" —— 删除值，如果 value 在这个方法调用的时候存在则返回 true ，否则返回 false。")]),p("li",null,[p("code",null,"set.has(value)"),l(" —— 如果 value 在 set 中，返回 true，否则返回 false。")]),p("li",null,[p("code",null,"set.clear()"),l(" —— 清空 set。")]),p("li",null,[p("code",null,"set.size"),l(" —— 返回元素个数。")])],-1),ys=p("h3",{id:"weakmap-weakset"},[p("a",{class:"header-anchor",href:"#weakmap-weakset","aria-hidden":"true"},"#"),l(" WeakMap / WeakSet")],-1),hs=p("p",null,[p("code",null,"WeakMap"),l(" 的键只能是 "),p("code",null,"object"),l("。 当在 object 被清理时，对应的 weakmap 中的内容也会被清理。 weakmap 适合在：")],-1),fs=p("ul",null,[p("li",null,"需要有缓存，当一个函数的结果需要被记住（“缓存”），这样在后续的对同一个对象的调用时，就可以重用这个被缓存的结果。当对象被垃圾回收时，对应的缓存的结果也会被自动地从内存中清除。"),p("li",null,"额外的数据，将这些数据放到 WeakMap 中，并使用该对象作为这些数据的键，那么当该对象被垃圾回收机制回收后，这些数据也会被自动清除")],-1),bs=p("p",null,"注意， weakmap 只支持如下的几个方法：",-1),ws=p("ul",null,[p("li",null,"weakMap.get(key)"),p("li",null,"weakMap.set(key, value)"),p("li",null,"weakMap.delete(key)"),p("li",null,"weakMap.has(key)")],-1),js=p("blockquote",null,[p("p",null,"这两个数据结构均不支持迭代。所以需要在合适的时机使用它们。")],-1),vs=p("h3",{id:"object-keys-values-entries"},[p("a",{class:"header-anchor",href:"#object-keys-values-entries","aria-hidden":"true"},"#"),l(" Object.keys, values, entries")],-1),Ss=p("blockquote",null,[p("p",null,"Object.keys/values/entries 会忽略 symbol 属性")],-1),Os=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[l("Object"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"fromEntries"),p("span",{class:"token punctuation"},"("),l("\n  "),p("span",{class:"token comment"},"// 转换为数组，之后使用 map 方法，然后通过 fromEntries 再转回到对象"),l("\n  Object"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"entries"),p("span",{class:"token punctuation"},"("),l("prices"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"map"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[p("span",{class:"token punctuation"},"["),l("key"),p("span",{class:"token punctuation"},","),l(" value"),p("span",{class:"token punctuation"},"]")]),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token operator"},"=>"),l(),p("span",{class:"token punctuation"},"["),l("key"),p("span",{class:"token punctuation"},","),l(" value "),p("span",{class:"token operator"},"*"),l(),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n")])],-1),Js=p("h3",{id:"数组解构"},[p("a",{class:"header-anchor",href:"#数组解构","aria-hidden":"true"},"#"),l(" 数组解构")],-1),Ns=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" arr "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},'"Firstname"'),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},'"Lastname"'),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"["),l("firstname"),p("span",{class:"token punctuation"},","),l(" lastname"),p("span",{class:"token punctuation"},"]"),l(),p("span",{class:"token operator"},"="),l(" arr\n")])],-1),xs=p("p",null,[l("如果不想要某个元素可以使用 "),p("code",null,","),l(" 来忽略对应位置上的内容")],-1),Ms=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"["),l("a"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},","),l("c"),p("span",{class:"token punctuation"},"]"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'a'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'b'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'c'"),p("span",{class:"token punctuation"},"]"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("c"),p("span",{class:"token punctuation"},")"),l("\n")])],-1),Ds=p("p",null,"实际上等号右侧可以是任何可迭代的内容，也可以是任何可以赋值的内容。",-1),Is=p("p",null,[l("任何剩余的内容，可以使用 "),p("code",null,"..."),l(" 来接收。比如：")],-1),_s=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"["),l("a"),p("span",{class:"token punctuation"},","),l(" b"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token operator"},"..."),l("c"),p("span",{class:"token punctuation"},"]"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"5"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"6"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"7"),p("span",{class:"token punctuation"},"]"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("c"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"4"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"5"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"6"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"7"),p("span",{class:"token punctuation"},"]"),l("\n")])],-1),Ts=p("p",null,[l("数组解构赋值的默认值是 "),p("code",null,"undefined")],-1),Ps=p("h3",{id:"结构解构"},[p("a",{class:"header-anchor",href:"#结构解构","aria-hidden":"true"},"#"),l(" 结构解构")],-1),Cs=p("p",null,"我们一般使用结构的字段名来直接获取对应的字段的 value。 也可以将对应的字段的值赋值给自定义的变量。",-1),As=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" options "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  title"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},"'menu'"),p("span",{class:"token punctuation"},","),l("\n  width"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),l("\n  height"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"200"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"{"),l("title"),p("span",{class:"token punctuation"},","),l(" width"),p("span",{class:"token operator"},":"),l(" w"),p("span",{class:"token punctuation"},","),l(" height"),p("span",{class:"token operator"},":"),l(" h"),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token operator"},"="),l(" options \n")])],-1),Ys=p("p",null,[l("对于不一定存在的字段，我们可以使用 "),p("code",null,"="),l(" 设置默认值。这样避免因为字段不存在而报错。")],-1),Fs=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" options "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  title"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},"'menu'"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"{"),l("width "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),l(" height "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"200"),p("span",{class:"token punctuation"},","),l(" title"),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token operator"},"="),l(" options\n"),p("span",{class:"token comment"},"//同样可以做到重命名"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"{"),l("width"),p("span",{class:"token operator"},":"),l(" w "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),l(" height"),p("span",{class:"token operator"},":"),l(" h "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"200"),p("span",{class:"token punctuation"},","),l(" title"),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token operator"},"="),l(" options\n")])],-1),qs=p("p",null,[l("对应剩余的内容一样可以使用 "),p("code",null,"..."),l(" 。")],-1),zs=p("p",null,"可以使用前套的解构，一个基本的例子：",-1),Hs=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" options "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  size"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"{"),l("\n    width"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),l("\n    height"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"200"),l("\n  "),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l("\n  items"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'hello'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'world'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l("\n  extra"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token boolean"},"true"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token punctuation"},"{"),l(" size"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"{"),l("width"),p("span",{class:"token punctuation"},","),l(" height"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l(" items"),p("span",{class:"token operator"},":"),p("span",{class:"token punctuation"},"["),l("item1"),p("span",{class:"token punctuation"},","),l(" item2"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(" noexist"),p("span",{class:"token operator"},"="),p("span",{class:"token boolean"},"true"),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token operator"},"="),l(" options\n")])],-1),$s=p("h3",{id:"智能函数参数"},[p("a",{class:"header-anchor",href:"#智能函数参数","aria-hidden":"true"},"#"),l(" 智能函数参数")],-1),Es=p("p",null,"一个函数需要接收很多的参数时候，我们一般通过传递一个结构到函数内，此时可以使用结构或者是嵌套解构的方式进行：",-1),Ls=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"showMenu"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"{"),l(" title "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token string"},'"Menu"'),p("span",{class:"token punctuation"},","),l(" width"),p("span",{class:"token operator"},":"),l(" w "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},","),l(" height "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"200"),l(),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token function"},"alert"),p("span",{class:"token punctuation"},"("),l(),p("span",{class:"token template-string"},[p("span",{class:"token template-punctuation string"},"`"),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),l("title"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token string"}," "),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),l("w"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token string"}," "),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),l("height"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token template-punctuation string"},"`")]),l(),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token function"},"showMenu"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l(),p("span",{class:"token comment"},"// Menu 100 200"),l("\n")])],-1),Rs=p("h3",{id:"时间"},[p("a",{class:"header-anchor",href:"#时间","aria-hidden":"true"},"#"),l(" 时间")],-1),Ws=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" date "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Date"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token comment"},"// 时间戳,带毫秒"),l("\ndate"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"getTime"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 或者使用 +date 效果一样"),l("\n"),p("span",{class:"token comment"},"// 增加 24 小时，单位毫秒"),l("\n"),p("span",{class:"token keyword"},"let"),l(" onedayLater "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Date"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"24"),l(),p("span",{class:"token operator"},"*"),l(),p("span",{class:"token number"},"3600"),l(),p("span",{class:"token operator"},"*"),l(),p("span",{class:"token number"},"1000"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token comment"},"// 解析时间"),l("\n"),p("span",{class:"token keyword"},"let"),l(" date "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Date"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'2022-01-02'"),p("span",{class:"token punctuation"},")"),l("\n\n"),p("span",{class:"token comment"},"//可以完全指定时间"),l("\n"),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Date"),p("span",{class:"token punctuation"},"("),p("span",{class:"token number"},"2011"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"0"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"//1 Jan 2011, 00:00:00"),l("\n")])],-1),Zs=p("p",null,"一些比较方便的访问日期的组件：",-1),Gs=p("ul",null,[p("li",null,"getFullYear()"),p("li",null,"getMonth() // 0-11"),p("li",null,"getDate() // 只返回 1-31 之间的数字"),p("li",null,"getHours()"),p("li",null,"getMinutes()"),p("li",null,"getSeconds()"),p("li",null,"getMilliseconds()"),p("li",null,"getDay() 返回一周中的第几天 0-6， 0表示周日")],-1),Us=p("p",null,"同时，我们可以使用一些设置时间的函数对时间进行设置。这些主要是用来配置一些指定的时间",-1),Bs=p("ul",null,[p("li",null,"setFullYear(year, [month], [date])"),p("li",null,"setMonth(month, [date])"),p("li",null,"setDate(date)"),p("li",null,"setHours(hour, [min], [sec], [ms])"),p("li",null,"setMinutes(min, [sec], [ms])"),p("li",null,"setSeconds(sec, [ms])"),p("li",null,"setMilliseconds(ms)"),p("li",null,"setTime(milliseconds)（使用自 1970-01-01 00:00:00 UTC+0 以来的毫秒数来设置整个日期）")],-1),Ks=p("p",null,"两个时间可以直接相减，结果是 ms 的时间差。 一个更快用于计算时间差的方式是：",-1),Qs=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" start "),p("span",{class:"token operator"},"="),l(" Date"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"now"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token operator"},"..."),p("span",{class:"token punctuation"},"."),l("\n"),p("span",{class:"token keyword"},"let"),l(" end "),p("span",{class:"token operator"},"="),l(" Date"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"now"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(" diff "),p("span",{class:"token operator"},"="),l(" end"),p("span",{class:"token operator"},"-"),l("start\n")])],-1),Vs=p("p",null,[l("可以使用 "),p("code",null,"Date.parse(str)"),l(" 来解析日期, 字符串的格式应该为："),p("code",null,"YYYY-MM-DDTHH:mm:ss.sssZ"),l("，其中：")],-1),Xs=p("ul",null,[p("li",null,"YYYY-MM-DD —— 日期：年-月-日。"),p("li",null,"字符 “T” 是一个分隔符。"),p("li",null,"HH:mm:ss.sss —— 时间：小时，分钟，秒，毫秒。"),p("li",null,"可选字符 ‘Z’ 为 ±hh:mm 格式的时区。单个字符 Z 代表 UTC+0 时区。")],-1),na=p("h3",{id:"json"},[p("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),l(" JSON")],-1),sa=p("p",null,[l("一般我们使用 "),p("code",null,"JSON.parse"),l(" 和 "),p("code",null,"JSON.stringify"),l(" 这两个方法。 其中 "),p("code",null,"JSON.stringify"),l(" 有两个不太常用参数。 "),p("code",null,"JSON.stringify(value, replacer, spaces)")],-1),aa=p("ul",null,[p("li",null,"replacer")],-1),ta=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" object "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  title"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},"'Hello'"),p("span",{class:"token punctuation"},","),l("\n  number"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"10"),p("span",{class:"token punctuation"},","),l("\n  arr"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"2"),p("span",{class:"token punctuation"},","),p("span",{class:"token number"},"3"),p("span",{class:"token punctuation"},"]"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token comment"},"// 使用数组"),l("\n"),p("span",{class:"token constant"},"JSON"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"stringify"),p("span",{class:"token punctuation"},"("),l("object"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),p("span",{class:"token string"},"'arr'"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},")"),l("  "),p("span",{class:"token comment"},"// '{\"arr\":[1,2,3]}'"),l("\n\n"),p("span",{class:"token comment"},"// 使用函数"),l("\n"),p("span",{class:"token constant"},"JSON"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"stringify"),p("span",{class:"token punctuation"},"("),l("object"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"replacer"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[l("key"),p("span",{class:"token punctuation"},","),l(" value")]),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  console"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token template-string"},[p("span",{class:"token template-punctuation string"},"`"),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),l("key"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token string"},": "),p("span",{class:"token interpolation"},[p("span",{class:"token interpolation-punctuation punctuation"},"${"),l("value"),p("span",{class:"token interpolation-punctuation punctuation"},"}")]),p("span",{class:"token template-punctuation string"},"`")]),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token punctuation"},"("),l("key "),p("span",{class:"token operator"},"=="),l(),p("span",{class:"token string"},"'arr'"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token operator"},"?"),l(),p("span",{class:"token keyword"},"undefined"),l(),p("span",{class:"token operator"},":"),l(" value"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},")"),l("   "),p("span",{class:"token comment"},'// \'{"title":"Hello","number":10}\''),l("\n")])],-1),oa=p("ul",null,[p("li",null,"space 主要是用来进行美化输出的。")],-1),ea=p("h4",{id:"自定义-tojson"},[p("a",{class:"header-anchor",href:"#自定义-tojson","aria-hidden":"true"},"#"),l(" 自定义 toJSON")],-1),ca=p("p",null,"像 toString 进行字符串转换，对象也可以提供 toJSON 方法来进行 JSON 转换。如果可用，JSON.stringify 会自动调用它。",-1),pa=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" room "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  number"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"23"),p("span",{class:"token punctuation"},","),l("\n  "),p("span",{class:"token function"},"toJSON"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("number"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(" meetup "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  title"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token string"},'"Conference"'),p("span",{class:"token punctuation"},","),l("\n  room\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},";"),l("\n\n"),p("span",{class:"token constant"},"JSON"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"stringify"),p("span",{class:"token punctuation"},"("),l("room"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 23"),l("\n\n"),p("span",{class:"token constant"},"JSON"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"stringify"),p("span",{class:"token punctuation"},"("),l("meetup"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token comment"},'/*\n  {\n    "title":"Conference",\n    "room": 23\n  }\n*/'),l("\n")])],-1),la=p("h4",{id:"json-parse"},[p("a",{class:"header-anchor",href:"#json-parse","aria-hidden":"true"},"#"),l(" JSON.parse")],-1),ua=p("p",null,"同样的，JSON.parse 是可以接收一个 receiver 参数的，用于解析一些特殊字段，或者是需要自定义处理的内容。比如：",-1),ka=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" schedule "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token template-string"},[p("span",{class:"token template-punctuation string"},"`"),p("span",{class:"token string"},'{\n  "meetups": [\n    {"title":"Conference","date":"2017-11-30T12:00:00.000Z"},\n    {"title":"Birthday","date":"2017-04-18T12:00:00.000Z"}\n  ]\n}'),p("span",{class:"token template-punctuation string"},"`")]),p("span",{class:"token punctuation"},";"),l("\n\nschedule "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token constant"},"JSON"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"parse"),p("span",{class:"token punctuation"},"("),l("schedule"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token keyword"},"function"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[l("key"),p("span",{class:"token punctuation"},","),l(" value")]),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token keyword"},"if"),l(),p("span",{class:"token punctuation"},"("),l("key "),p("span",{class:"token operator"},"=="),l(),p("span",{class:"token string"},"'date'"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Date"),p("span",{class:"token punctuation"},"("),l("value"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token keyword"},"return"),l(" value"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n")])],-1),ra=p("blockquote",null,[p("p",null,"注意， replacer 的第一次会返回一个 key 是空，value 是自身的结果，这个在操作的时候需要考虑到。")],-1),ia=p("h3",{id:"函数-1"},[p("a",{class:"header-anchor",href:"#函数-1","aria-hidden":"true"},"#"),l(" 函数")],-1),da=p("p",null,[l("我们可以通过 "),p("code",null,"functionname.name"),l(" 来获取一个函数的名称。比如：")],-1),ma=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"sayYeah"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  console"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},"'yeah'"),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("sayYeah"),p("span",{class:"token punctuation"},"."),l("name"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// sayYeah"),l("\n")])],-1),ga=p("p",null,[l("可以通过 "),p("code",null,"length"),l(" 来获取到函数的参数，不过 rest 的参数不会被统计。")],-1),ya=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"f1"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},[l("a"),p("span",{class:"token punctuation"},","),l("b"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token operator"},"..."),l("c")]),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),l("\n\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("f1"),p("span",{class:"token punctuation"},"."),l("length"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 2"),l("\n")])],-1),ha=p("p",null,"可以给函数自定义一些变量，这样可以做到在函数外部也是可以访问到对应的变量的，这个和闭包是有所不同的。",-1),fa=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"makeCounter"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n\n  "),p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"counter"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"return"),l(" counter"),p("span",{class:"token punctuation"},"."),l("count"),p("span",{class:"token operator"},"++"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n\n  counter"),p("span",{class:"token punctuation"},"."),l("count"),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"0"),l("\n  "),p("span",{class:"token keyword"},"return"),l(" counter\n"),p("span",{class:"token punctuation"},"}"),l("\n\n\n"),p("span",{class:"token keyword"},"let"),l(" counter "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token function"},"makeCounter"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"counter"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),l("  "),p("span",{class:"token comment"},"// 0"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"counter"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),l("  "),p("span",{class:"token comment"},"// 1"),l("\n\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("counter"),p("span",{class:"token punctuation"},"."),l("count"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 2"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("counter"),p("span",{class:"token punctuation"},"."),l("count"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 2"),l("\n")])],-1),ba=p("p",null,"函数的 NFE(Named Function Expression), 可以在函数被赋值了另外的一变量的时候仍然可以调用。",-1),wa=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(),p("span",{class:"token function-variable function"},"sayhi"),l(),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"func"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},"name"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token keyword"},"if"),p("span",{class:"token punctuation"},"("),l("name"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    console"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("name"),p("span",{class:"token punctuation"},")"),l("\n  "),p("span",{class:"token punctuation"},"}"),l(),p("span",{class:"token keyword"},"else"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token function"},"func"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"default"'),p("span",{class:"token punctuation"},")"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(" sayhi2 "),p("span",{class:"token operator"},"="),l(" sayhi\n"),p("span",{class:"token keyword"},"let"),l(" welcome "),p("span",{class:"token operator"},"="),l(" sayhi\n"),p("span",{class:"token function"},"welcome"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l("\nsayhi "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"null"),l("\n\n"),p("span",{class:"token function"},"sayhi2"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l("\n")])],-1),ja=p("h3",{id:"settimeout-setinterval"},[p("a",{class:"header-anchor",href:"#settimeout-setinterval","aria-hidden":"true"},"#"),l(" setTimeout / setInterval")],-1),va=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" timerId "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token function"},"setTimeout"),p("span",{class:"token punctuation"},"("),l("func"),p("span",{class:"token operator"},"|"),l("code"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),l("delay"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),l("arg1"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),l("arg2"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token operator"},"..."),p("span",{class:"token punctuation"},")"),l("\n"),p("span",{class:"token keyword"},"let"),l(" timerId "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token function"},"setInterval"),p("span",{class:"token punctuation"},"("),l("func"),p("span",{class:"token operator"},"|"),l("code"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),l("delay"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),l("arg1"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"["),l("arg2"),p("span",{class:"token punctuation"},"]"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token operator"},"..."),p("span",{class:"token punctuation"},")"),l("\n")])],-1),Sa=p("ul",null,[p("li",null,"setTimeout 允许我们将函数推迟到一段时间间隔之后再执行。"),p("li",null,"setInterval 允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。")],-1),Oa=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" tid "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token function"},"setTimeout"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token operator"},"=>"),l(),p("span",{class:"token punctuation"},"{"),l(" console"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"say hello"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"5000"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token function"},"clearTimeout"),p("span",{class:"token punctuation"},"("),l("tid"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// 取消推迟执行"),l("\n")])],-1),Ja=p("blockquote",null,[p("p",null,"嵌套的 setTimeout 能够精确地设置两次执行之间的延时，而 setInterval 却不能。")],-1),Na=p("p",null,[l("这边需要注意的是 "),p("code",null,"setInterval"),l(" 是一个固定间隔，如果执行的函数耗时超过这个间隔，setInterval 还是会在指定时间内调用函数。 而用两次嵌套的 setTimeout 可以比较均匀一些。")],-1),xa=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" i "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token number"},"1"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token function"},"setTimeout"),p("span",{class:"token punctuation"},"("),p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"run"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token function"},"func"),p("span",{class:"token punctuation"},"("),l("i"),p("span",{class:"token operator"},"++"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n  "),p("span",{class:"token function"},"setTimeout"),p("span",{class:"token punctuation"},"("),l("run"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token number"},"100"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n")])],-1),Ma=p("p",null,"注意，例如，浏览器内的计时器可能由于许多原因而变慢：",-1),Da=p("ul",null,[p("li",null,"CPU 过载。"),p("li",null,"浏览器页签处于后台模式。"),p("li",null,"笔记本电脑用的是电池供电（译注：使用电池供电会以降低性能为代价提升续航）。")],-1),Ia=p("p",null,"所有这些因素，可能会将定时器的最小计时器分辨率（最小延迟）增加到 300ms 甚至 1000ms，具体以浏览器及其设置为准。",-1),_a=p("blockquote",null,[p("p",null,"任何 setTimeout 都只会在当前代码执行完毕之后才会执行。")],-1),Ta=p("h3",{id:"对象属性配置"},[p("a",{class:"header-anchor",href:"#对象属性配置","aria-hidden":"true"},"#"),l(" 对象属性配置")],-1),Pa=p("p",null,[l("可以通过 "),p("code",null,"Object.getOwnPropertyDescriptor(obj, propertyName)"),l(" 获取一个对象的指定字段的属性描述信息。 同时可以使用 "),p("code",null,"Object.defineProperty(obj, propertyName, descriptor)"),l(" 去设置属性。")],-1),Ca=p("p",null,"这边一般会涉及到三个标志：",-1),Aa=p("ul",null,[p("li",null,"writable"),p("li",null,"enumerable"),p("li",null,"configurable")],-1),Ya=p("p",null,[l("使用 "),p("code",null,"defineProperty"),l(" 可以设置这些标志。 当某个属性的 "),p("code",null,"enumerable"),l(" 被设置成 false 时，则该属性将不会出现在 "),p("code",null,"for ... in ..."),l(" 中。 当我们将 "),p("code",null,"configurable"),l(" 设置成 false 时，则我们无法删除该属性，且该过程不可逆。")],-1),Fa=p("p",null,[l("此外我们可以使用 "),p("code",null,"defineProerties"),l(" 来设置多个属性的标志。同理可以使用 "),p("code",null,"getOwnPropertyDescriptors"),l(" 获取多个属性的。")],-1),qa=p("p",null,"可以使用如下方式进行 object 的克隆",-1),za=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" clone "),p("span",{class:"token operator"},"="),l(" Object"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"defineProperties"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l(" Object"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"getOwnPropertyDescriptors"),p("span",{class:"token punctuation"},"("),l("obj"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},";"),l("\n")])],-1),Ha=p("p",null,[l("对象还包含两个访问器属性，"),p("code",null,"getter"),l(" 和 "),p("code",null,"setter"),l("。即如下的代码：")],-1),$a=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"let"),l(" obj "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token keyword"},"get"),l(),p("span",{class:"token function"},"propName"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n\n  "),p("span",{class:"token punctuation"},"}"),l("\n\n  "),p("span",{class:"token keyword"},"set"),l(),p("span",{class:"token function"},"propName"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n\n  "),p("span",{class:"token punctuation"},"}"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n")])],-1),Ea=p("p",null,"一个 Object 的属性不能既是访问器，有是数据属性，比如下面的方式就是错误的。",-1),La=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token comment"},"//error code"),l("\nObject"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"defineProperty"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},"{"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token string"},"'prop'"),p("span",{class:"token punctuation"},","),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token function"},"get"),p("span",{class:"token punctuation"},"("),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n    "),p("span",{class:"token keyword"},"return"),l(),p("span",{class:"token number"},"1"),l("\n  "),p("span",{class:"token punctuation"},"}"),l("\n\n  value"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token number"},"2"),l("\n"),p("span",{class:"token punctuation"},"}"),p("span",{class:"token punctuation"},")"),l("\n")])],-1),Ra=p("p",null,[l("同样访问属性的描述符也可以使用 "),p("code",null,"defineProperty"),l(" 来设置。除了 "),p("code",null,"value"),l(" 和 "),p("code",null,"writable"),l(" 这两个不能设置外，我们可以设置 "),p("code",null,"get"),l(","),p("code",null,"set"),l(", "),p("code",null,"enumerable"),l(" 和 "),p("code",null,"configurable"),l(" 这四个。")],-1),Wa=p("h2",{id:"原型"},[p("a",{class:"header-anchor",href:"#原型","aria-hidden":"true"},"#"),l(" 原型")],-1),Za=p("p",null,[l("可以使用 "),p("code",null,"__proto__"),l(" 设置，也可以通过 "),p("code",null,"getPrototypeOf"),l(" 和 "),p("code",null,"setPrototypeOf"),l(" 来代替 "),p("code",null,"__proto__"),l(" 的设置方式。")],-1),Ga=p("p",null,[p("code",null,"for ... in"),l(" 循环也会迭代继承的属性。但是 "),p("code",null,"Object.keys"),l(" 只会返回自己的 key。")],-1),Ua=p("p",null,[l("可以使用 "),p("code",null," obj.hasOwnProperty(key)"),l(" 的方式来判断 key 是否是 obj 自身的，而不是痛殴继承获得的。")],-1),Ba=p("h2",{id:"f-prototype"},[p("a",{class:"header-anchor",href:"#f-prototype","aria-hidden":"true"},"#"),l(" F.prototype")],-1),Ka=p("p",null,[l("当我们在使用 "),p("code",null,"new"),l(" 关键字创建一个新的对象时，同样可以通过继承的方式来获取属性。")],-1),Qa=p("pre",{class:"language-js"},[p("code",{class:"language-js"},[p("span",{class:"token keyword"},"function"),l(),p("span",{class:"token function"},"Rabbit"),p("span",{class:"token punctuation"},"("),p("span",{class:"token parameter"},"name"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token punctuation"},"{"),l("\n  "),p("span",{class:"token keyword"},"this"),p("span",{class:"token punctuation"},"."),l("name "),p("span",{class:"token operator"},"="),l(" name\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token keyword"},"let"),l(" animal "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token punctuation"},"{"),l("\n  eats"),p("span",{class:"token operator"},":"),l(),p("span",{class:"token boolean"},"true"),l("\n"),p("span",{class:"token punctuation"},"}"),l("\n\n"),p("span",{class:"token class-name"},"Rabbit"),p("span",{class:"token punctuation"},"."),l("prototype "),p("span",{class:"token operator"},"="),l(" animal\n\n"),p("span",{class:"token keyword"},"let"),l(" rabbit "),p("span",{class:"token operator"},"="),l(),p("span",{class:"token keyword"},"new"),l(),p("span",{class:"token class-name"},"Rabbit"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"White Rabbit"'),p("span",{class:"token punctuation"},")"),l("\nconsole"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"log"),p("span",{class:"token punctuation"},"("),l("rabbit"),p("span",{class:"token punctuation"},"."),l("eats"),p("span",{class:"token punctuation"},")"),l(),p("span",{class:"token comment"},"// true"),l("\n")])],-1),Va=p("p",null,[l("每个函数都有构造器属性，默认的 prototype 只有一个属性 "),p("code",null,"constructor"),l(" 的对象，这个属性指向函数本身。")],-1),Xa=p("p",null,[p("strong",null,"prototyepe 属性在常规的对象上没有什么特殊的含义，只是一个普通的字段，但是在函数里，就有了特殊意义了")],-1),nt=p("h2",{id:"原生的原型"},[p("a",{class:"header-anchor",href:"#原生的原型","aria-hidden":"true"},"#"),l(" 原生的原型")],-1),st=p("ul",null,[p("li",null,[l("所有的内建对象都遵循相同的模式（pattern）： "),p("ul",null,[p("li",null,"方法都存储在 prototype 中（Array.prototype、Object.prototype、Date.prototype 等）。"),p("li",null,"对象本身只存储数据（数组元素、对象属性、日期）。")])]),p("li",null,"原始数据类型也将方法存储在包装器对象的 prototype 中：Number.prototype、String.prototype 和 Boolean.prototype。只有 undefined 和 null 没有包装器对象。"),p("li",null,"内建原型可以被修改或被用新的方法填充。但是不建议更改它们。唯一允许的情况可能是，当我们添加一个还没有被 JavaScript 引擎支持，但已经被加入 JavaScript 规范的新标准时，才可能允许这样做。")],-1),at=p("blockquote",null,[p("p",null,[l("如果要将一个用户生成的键放入一个对象，那么内建的 "),p("strong",null,"proto"),l(" getter/setter 是不安全的。因为用户可能会输入 “"),p("strong",null,"proto"),l("” 作为键，这会导致一个 error，虽然我们希望这个问题不会造成什么大影响，但通常会造成不可预料的后果。")])],-1),tt=p("blockquote",null,[p("p",null,[l("因此，我们可以使用 Object.create(null) 创建一个没有 "),p("strong",null,"proto"),l(" 的 “very plain” 对象，或者对此类场景坚持使用 Map 对象就可以了。")])],-1),ot={expose:[],setup(l){const ot={title:"Javascript INFO notes",date:"2022-01-05T00:00:00.000Z",author:"Linkang Chan",twitter:"JessEisen_LJ",description:"morden javascript",public:!0,tag:"22A05 mordenJS",meta:[{property:"og:title",content:"Javascript INFO notes"},{property:"og:description",content:"morden javascript"},{name:"description",content:"morden javascript"}]};return t({title:"Javascript INFO notes",meta:[{property:"og:title",content:"Javascript INFO notes"},{property:"og:description",content:"morden javascript"},{name:"description",content:"morden javascript"}]}),(t,l)=>{const et=n,ct=s,pt=a;return o(),e(pt,{frontmatter:ot},{default:c((()=>[p("div",null,[u,k,p("p",null,[p(et,{green:""},{default:c((()=>[r])),_:1}),i,d,m,p(et,{green:""},{default:c((()=>[g])),_:1}),y,h,f,b,w]),j,v,S,O,J,N,x,M,D,I,_,T,p("p",null,[p(ct,{text:"devTool doc",url:"https://developer.chrome.com/docs/devtools/"},{default:c((()=>[P])),_:1})]),C,p("p",null,[p(ct,{text:"JsDoc",url:"https://en.wikipedia.org/wiki/JSDoc"},{default:c((()=>[A])),_:1}),p(ct,{text:"JsDoc 3",url:"https://github.com/jsdoc/jsdoc"},{default:c((()=>[Y])),_:1})]),F,p("p",null,[p(ct,{text:"ES6",url:"https://kangax.github.io/compat-table/es6/"},{default:c((()=>[q])),_:1})]),z,H,$,E,L,R,W,Z,G,U,B,K,Q,V,X,nn,sn,an,tn,on,en,cn,pn,ln,un,kn,rn,dn,mn,gn,yn,hn,fn,bn,wn,jn,vn,Sn,On,Jn,Nn,xn,Mn,Dn,In,_n,Tn,Pn,Cn,An,Yn,Fn,qn,zn,Hn,$n,En,Ln,Rn,Wn,Zn,Gn,Un,Bn,Kn,p("p",null,[p(ct,{text:"MDN flat documentation",url:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"},{default:c((()=>[Qn])),_:1})]),Vn,Xn,ns,ss,as,ts,os,es,cs,ps,ls,us,ks,rs,is,ds,ms,gs,ys,hs,fs,bs,ws,js,vs,Ss,Os,Js,Ns,xs,Ms,Ds,Is,_s,Ts,Ps,Cs,As,Ys,Fs,qs,zs,Hs,$s,Es,Ls,Rs,Ws,Zs,Gs,Us,Bs,Ks,Qs,Vs,Xs,na,sa,aa,ta,oa,ea,ca,pa,la,ua,ka,ra,ia,da,ma,ga,ya,ha,fa,ba,wa,ja,va,Sa,Oa,Ja,Na,xa,Ma,Da,Ia,_a,Ta,Pa,Ca,Aa,Ya,Fa,qa,za,Ha,$a,Ea,La,Ra,Wa,Za,Ga,Ua,Ba,Ka,Qa,Va,Xa,nt,st,at,tt])])),_:1})}}};export default ot;
