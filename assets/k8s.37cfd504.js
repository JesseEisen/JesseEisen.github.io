import{_ as n}from"./app.449ba84e.js";import{h as a,o as s,a as e,w as t,b as o,k as c}from"./vendor.80607e96.js";const l=o("div",null,[o("p",null,[c("本文记录使用 kubeadm 安装 k8s 的大致过程。 在此之前需要确认一下系统上的相关环境。以下搭建是在 "),o("code",null,"ubuntu20.04"),c(" 上，使用 containerd 作为容器运行时。")]),o("h2",{id:"kubeadm-安装"},[o("a",{class:"header-anchor",href:"#kubeadm-安装","aria-hidden":"true"},"#"),c(" kubeadm 安装")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt-get"),c(" update\n"),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt-get"),c(),o("span",{class:"token function"},"install"),c(" -y apt-transport-https ca-certificates "),o("span",{class:"token function"},"curl"),c("\n"),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"curl"),c(" -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg "),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token function"},"sudo"),c(" apt-key "),o("span",{class:"token function"},"add"),c(" -\n"),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"tee"),c(" /etc/apt/sources.list.d/kubernetes.list "),o("span",{class:"token operator"},"<<-"),o("span",{class:"token string"},"'EOF'\ndeb https://mirrors.aliyun.com/kubernetes/apt kubernetes-xenial main\nEOF"),c("\n"),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt-get"),c(" update\n"),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt"),c(),o("span",{class:"token function"},"install"),c(" -y kubeadm kubelet kubectl kubernetes-cni\n")])]),o("p",null,[c("正常情况下相关的工具就安装完成了。就下来，我们需要配置一下 "),o("code",null,"containerd"),c(" 的相关内容")]),o("h2",{id:"containerd-配置"},[o("a",{class:"header-anchor",href:"#containerd-配置","aria-hidden":"true"},"#"),c(" containerd 配置")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt"),c(),o("span",{class:"token function"},"install"),c(" -y containerd.io\n$ "),o("span",{class:"token function"},"sudo"),c(" systemctl "),o("span",{class:"token builtin class-name"},"enable"),c(" containerd\n$ "),o("span",{class:"token function"},"sudo"),c(" systemctl status containerd "),o("span",{class:"token comment"},"# 查看状态"),c("\n")])]),o("p",null,"接下来生成一份 containerd 的配置，运行如下命令："),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(" containerd config default "),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"tee"),c(" /etc/containerd/config.toml "),o("span",{class:"token operator"},">"),c("/dev/null "),o("span",{class:"token operator"},[o("span",{class:"token file-descriptor important"},"2"),c(">")]),o("span",{class:"token file-descriptor important"},"&1"),c("\n")])]),o("p",null,[c("我们需要将 "),o("code",null,"cgroup"),c(" 开启, 进入 "),o("code",null,"config.toml"),c(" 文件中，将 "),o("code",null,"SystemdCgroup"),c(" 的值改为 True。")]),o("h3",{id:"nvidia-gpu-支持"},[o("a",{class:"header-anchor",href:"#nvidia-gpu-支持","aria-hidden":"true"},"#"),c(" NVIDIA GPU 支持")]),o("p",null,[c("首先我们需要安装 Nvidia runtime, 具体可以参考"),o("a",{href:"https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html",target:"_blank",rel:"noopener"},"链接"),c("：")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token assign-left variable"},"distribution"),o("span",{class:"token operator"},"="),o("span",{class:"token variable"},[o("span",{class:"token variable"},"$("),o("span",{class:"token builtin class-name"},"."),c(" /etc/os-release"),o("span",{class:"token punctuation"},";"),o("span",{class:"token builtin class-name"},"echo"),c(" $ID$VERSION_ID"),o("span",{class:"token variable"},")")]),c(),o("span",{class:"token punctuation"},"\\"),c("\n      "),o("span",{class:"token operator"},"&&"),c(),o("span",{class:"token function"},"curl"),c(" -fsSL https://nvidia.github.io/libnvidia-container/gpgkey "),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token function"},"sudo"),c(" gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg "),o("span",{class:"token punctuation"},"\\"),c("\n      "),o("span",{class:"token operator"},"&&"),c(),o("span",{class:"token function"},"curl"),c(" -s -L https://nvidia.github.io/libnvidia-container/"),o("span",{class:"token variable"},"$distribution"),c("/libnvidia-container.list "),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token punctuation"},"\\"),c("\n            "),o("span",{class:"token function"},"sed"),c(),o("span",{class:"token string"},"'s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g'"),c(),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token punctuation"},"\\"),c("\n            "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"tee"),c(" /etc/apt/sources.list.d/nvidia-container-toolkit.list\n\n$ "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt-get"),c(" update\n$ "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"apt-get"),c(),o("span",{class:"token function"},"install"),c(" -y nvidia-container-toolkit\n")])]),o("p",null,[c("安装成功后, "),o("code",null,"nvidia-container-runtime"),c(" 的命令便会出现， 接下来配置 "),o("code",null,"config.toml"),c(" 以支持 Nvidia runtime")]),o("pre",{class:"language-toml"},[o("code",{class:"language-toml"},[o("span",{class:"token key property"},"version"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token number"},"2"),c("\n"),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},"plugins"),o("span",{class:"token punctuation"},"]"),c("\n  "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri"'),o("span",{class:"token punctuation"},"]"),c("\n    "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".containerd'),o("span",{class:"token punctuation"},"]"),c("\n      "),o("span",{class:"token key property"},"default_runtime_name"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token string"},'"nvidia"'),c("\n\n      "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".containerd.runtimes'),o("span",{class:"token punctuation"},"]"),c("\n        "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia'),o("span",{class:"token punctuation"},"]"),c("\n          "),o("span",{class:"token key property"},"privileged_without_host_devices"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token boolean"},"false"),c("\n          "),o("span",{class:"token key property"},"runtime_engine"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token string"},'""'),c("\n          "),o("span",{class:"token key property"},"runtime_root"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token string"},'""'),c("\n          "),o("span",{class:"token key property"},"runtime_type"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token string"},'"io.containerd.runc.v2"'),c("\n          "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".containerd.runtimes.nvidia.options'),o("span",{class:"token punctuation"},"]"),c("\n            "),o("span",{class:"token key property"},"BinaryName"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token string"},'"/usr/bin/nvidia-container-runtime"'),c("\n")])]),o("p",null,[c("配置完成后，我们需要重启一下 "),o("code",null,"containerd")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(" systemctl restart containerd\n")])]),o("h2",{id:"其他配置"},[o("a",{class:"header-anchor",href:"#其他配置","aria-hidden":"true"},"#"),c(" 其他配置")]),o("h3",{id:"关闭-swap"},[o("a",{class:"header-anchor",href:"#关闭-swap","aria-hidden":"true"},"#"),c(" 关闭 swap")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(" swapoff -a\n")])]),o("h3",{id:"网络配置"},[o("a",{class:"header-anchor",href:"#网络配置","aria-hidden":"true"},"#"),c(" 网络配置")]),o("p",null,[c("在 "),o("code",null,"/etc/hosts"),c(" 中增加 master 节点的名称, 同时修改桥接配置")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(" modprobe br_netfilter\n")])]),o("h2",{id:"创建集群"},[o("a",{class:"header-anchor",href:"#创建集群","aria-hidden":"true"},"#"),c(" 创建集群")]),o("p",null,"运行如下的命令，来创建我们的集群："),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(" kubeadm init --image-repository"),o("span",{class:"token operator"},"="),c("registry.cn-hangzhou.aliyuncs.com/google_containers --control-plane-endpoint"),o("span",{class:"token operator"},"="),o("span",{class:"token number"},"172.21"),c(".0.16 --pod-network-cidr"),o("span",{class:"token operator"},"="),o("span",{class:"token number"},"10.244"),c(".0.0/16\n")])]),o("p",null,"相关说明:"),o("ul",null,[o("li",null,[o("code",null,"--image-repository"),c(" 国内加速镜像源")]),o("li",null,[o("code",null,"--control-plane-endpoint"),c(" 指定控制面地址，一般指定为 master 节点的 ip/")]),o("li",null,[o("code",null,"--pod-network-cidr"),c(" 用于后续安装网络插件使用，如果是 flannel, 设置固定值 "),o("code",null,"10.244.0.0/16")])]),o("p",null,[c("在 init 过程中如果提示 "),o("code",null,"sandbox"),c(" 的镜像需要更换时，可以修改 "),o("code",null,"/etc/containerd/config.toml"),c(" 中的 "),o("code",null,"sandbox_image"),c(" 为提示的那个镜像，比如 "),o("code",null,"registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.9")]),o("p",null,"如果遇到失败后，可以使用会退方式清理 init"),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"sudo"),c(" kubeadm reset\n")])]),o("h3",{id:"单节点使用"},[o("a",{class:"header-anchor",href:"#单节点使用","aria-hidden":"true"},"#"),c(" 单节点使用")]),o("p",null,"正常情况下，master 节点不接受 pod 的调度，当我们有需求时，可以将 master 节点支持调度 pod 。"),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubectl taint nodes --all node-role.kubernetes.io/control-plane-\n")]),o("p",null,"如果想还原回来，可以使用如下命令"),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ kubectl get node "),o("span",{class:"token comment"},"# 查看 master 节点名称"),c("\n$ kubectl taint node "),o("span",{class:"token punctuation"},"["),c("nodename"),o("span",{class:"token punctuation"},"]"),c(" node-role.kubernetes.io/control-plane:NoSchedule\n")])]),o("p",null,"安装完成后，会提示我们如下的三个操作，执行后："),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ "),o("span",{class:"token function"},"mkdir"),c(" -p "),o("span",{class:"token environment constant"},"$HOME"),c("/.kube\n$ "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"cp"),c(" -i /etc/kubernetes/admin.conf "),o("span",{class:"token environment constant"},"$HOME"),c("/.kube/config\n$ "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"chown"),c(),o("span",{class:"token variable"},[o("span",{class:"token variable"},"$("),o("span",{class:"token function"},"id"),c(" -u"),o("span",{class:"token variable"},")")]),o("span",{class:"token builtin class-name"},":"),o("span",{class:"token variable"},[o("span",{class:"token variable"},"$("),o("span",{class:"token function"},"id"),c(" -g"),o("span",{class:"token variable"},")")]),c(),o("span",{class:"token environment constant"},"$HOME"),c("/.kube/config\n")])]),o("h2",{id:"gpu-的插件支持"},[o("a",{class:"header-anchor",href:"#gpu-的插件支持","aria-hidden":"true"},"#"),c(" GPU 的插件支持")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.14.0/nvidia-device-plugin.yml\n")]),o("h2",{id:"安装-flannel-网络"},[o("a",{class:"header-anchor",href:"#安装-flannel-网络","aria-hidden":"true"},"#"),c(" 安装 flannel 网络")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n")]),o("h2",{id:"查看"},[o("a",{class:"header-anchor",href:"#查看","aria-hidden":"true"},"#"),c(" 查看")]),o("ul",null,[o("li",null,"daemonset")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubectl get daemonset -n kube-system\n")]),o("ul",null,[o("li",null,"pods")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubectl get pods -A\n")]),o("h2",{id:"自动补齐"},[o("a",{class:"header-anchor",href:"#自动补齐","aria-hidden":"true"},"#"),c(" 自动补齐")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ kubectl completion "),o("span",{class:"token function"},"bash"),c(),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"tee"),c(" /etc/bash_completion.d/kubectl "),o("span",{class:"token operator"},">"),c(" /dev/null\n$ "),o("span",{class:"token function"},"sudo"),c(),o("span",{class:"token function"},"chmod"),c(" a+r /etc/bash_completion.d/kubectl\n$ "),o("span",{class:"token builtin class-name"},"."),c(" ~/.bashrc\n")])]),o("h2",{id:"生成-token"},[o("a",{class:"header-anchor",href:"#生成-token","aria-hidden":"true"},"#"),c(" 生成 token")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("kubectl create serviceaccount admin-user\nkubectl create clusterrolebinding admin-user-binding "),o("span",{class:"token punctuation"},"\\"),c("\n  --clusterrole cluster-admin "),o("span",{class:"token punctuation"},"\\"),c("\n  --serviceaccount default:admin-user\n\n"),o("span",{class:"token function"},"cat"),c(),o("span",{class:"token operator"},"<<"),o("span",{class:"token string"},[c("EOF"),o("span",{class:"token bash punctuation"},[c(),o("span",{class:"token operator"},"|"),c(" kubectl create -f -")]),c('\napiVersion: v1\nkind: Secret\nmetadata:\n  name: admin-user-token\n  annotations:\n    secret.ttl: "94608000"\n    kubernetes.io/service-account.name: admin-user\ntype: kubernetes.io/service-account-token\nEOF')]),c("\n\n"),o("span",{class:"token assign-left variable"},"SECRET_NAME"),o("span",{class:"token operator"},"="),o("span",{class:"token string"},'"admin-user-token"'),c("\n"),o("span",{class:"token assign-left variable"},"TOKEN"),o("span",{class:"token operator"},"="),o("span",{class:"token variable"},[o("span",{class:"token variable"},"$("),c("kubectl get secret $"),o("span",{class:"token punctuation"},"{"),c("SECRET_NAME"),o("span",{class:"token punctuation"},"}"),c(" -o "),o("span",{class:"token assign-left variable"},"jsonpath"),o("span",{class:"token operator"},"="),o("span",{class:"token string"},"'{$.data.token}'"),c(),o("span",{class:"token operator"},"|"),c(" base64 -d "),o("span",{class:"token operator"},"|"),c(),o("span",{class:"token function"},"sed"),c(" $"),o("span",{class:"token string"},[c("'s/$/"),o("span",{class:"token entity",title:"\\\\"},"\\\\"),o("span",{class:"token entity",title:"\\n"},"\\n"),c("/g'")]),o("span",{class:"token variable"},")")]),c("\n"),o("span",{class:"token builtin class-name"},"echo"),c(),o("span",{class:"token variable"},"$TOKEN"),c("\n")])]),o("p",null,"将上述内容保存成 bash 脚本后执行即可。"),o("h2",{id:"配置-registry"},[o("a",{class:"header-anchor",href:"#配置-registry","aria-hidden":"true"},"#"),c(" 配置 registry")]),o("pre",{class:"language-toml"},[o("code",{class:"language-toml"},[o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".registry.mirrors'),o("span",{class:"token punctuation"},"]"),c("\n    "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".registry.mirrors."carbonsilicon-ai-registry.cn-hangzhou.cr.aliyuncs.com"'),o("span",{class:"token punctuation"},"]"),c("\n      "),o("span",{class:"token key property"},"endpoint"),c(),o("span",{class:"token punctuation"},"="),c(),o("span",{class:"token punctuation"},"["),o("span",{class:"token string"},'"https://carbonsilicon-ai-registry.cn-hangzhou.cr.aliyuncs.com"'),o("span",{class:"token punctuation"},"]"),c("\n"),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".registry.configs'),o("span",{class:"token punctuation"},"]"),c("\n    "),o("span",{class:"token punctuation"},"["),o("span",{class:"token table class-name"},'plugins."io.containerd.grpc.v1.cri".registry.configs."carbonsilicon-ai-registry.cn-hangzhou.cr.aliyuncs.com".auth'),o("span",{class:"token punctuation"},"]"),c("\n      "),o("span",{class:"token key property"},"username"),o("span",{class:"token punctuation"},"="),o("span",{class:"token string"},'"xxxx"'),c("\n      "),o("span",{class:"token key property"},"password"),o("span",{class:"token punctuation"},"="),o("span",{class:"token string"},'"xxx"'),c("\n")])]),o("p",null,[c("注意，registry 的名称需要是完整的名称，否则无法鉴权成功。比如这边的 "),o("code",null,"carbonsilicon-ai-registry.cn-hangzhou.cr.aliyuncs.com"),c(", 需要完整写入。")]),o("p",null,[o("a",{href:"https://github.com/containerd/containerd/blob/main/docs/cri/registry.md",target:"_blank",rel:"noopener"},"containerd documentation")]),o("h2",{id:"metric-server"},[o("a",{class:"header-anchor",href:"#metric-server","aria-hidden":"true"},"#"),c(" metric-server")]),o("p",null,"需要修改部分内容："),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server:v0.6.4\nspec:\n  containers:\n  - args:\n    - --cert-dir"),o("span",{class:"token operator"},"="),c("/tmp\n    - --secure-port"),o("span",{class:"token operator"},"="),o("span",{class:"token number"},"4443"),c("\n    - --kubelet-insecure-tls  "),o("span",{class:"token comment"},"# 新增"),c("\n    - --kubelet-preferred-address-types"),o("span",{class:"token operator"},"="),c("InternalIP,ExternalIP,Hostname\n")])]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n"),o("span",{class:"token comment"},"## crictl 无法使用"),c("\n\n需要在 "),o("span",{class:"token variable"},[o("span",{class:"token variable"},"`"),c("/etc/crictl.yaml"),o("span",{class:"token variable"},"`")]),c(" 中写入如下内容：\n\n```bash\nruntime-endpoint: "),o("span",{class:"token string"},'"unix:///run/containerd/containerd.sock"'),c("\nimage-endpoint: "),o("span",{class:"token string"},'"unix:///run/containerd/containerd.sock"'),c("\ntimeout: "),o("span",{class:"token number"},"0"),c("\ndebug: "),o("span",{class:"token boolean"},"false"),c("\npull-image-on-create: "),o("span",{class:"token boolean"},"false"),c("\ndisable-pull-on-run: "),o("span",{class:"token boolean"},"false"),c("\n")])]),o("h2",{id:"创建加入节点的-token"},[o("a",{class:"header-anchor",href:"#创建加入节点的-token","aria-hidden":"true"},"#"),c(" 创建加入节点的 token")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubeadm token create --print-join-command\n")]),o("h2",{id:"安全移除节点"},[o("a",{class:"header-anchor",href:"#安全移除节点","aria-hidden":"true"},"#"),c(" 安全移除节点")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubectl drain nodename --ignore-daemonsets\n$ kubectl delete node node-name \n")]),o("h2",{id:"恢复节点使用"},[o("a",{class:"header-anchor",href:"#恢复节点使用","aria-hidden":"true"},"#"),c(" 恢复节点使用")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},"$ kubectl uncordon node-name\n")]),o("h2",{id:"dns-配置"},[o("a",{class:"header-anchor",href:"#dns-配置","aria-hidden":"true"},"#"),c(" dns 配置")]),o("p",null,[c("当前遇到一个问题，在字节点上，无法访问外部服务。可以查看 "),o("code",null,"/var/lib/kubelet/config.yaml"),c(" 文件，修改相关的内容 DNS 内容。 但是这个问题不是最终的解决办法。")]),o("p",null,[c("同时也可以修改 "),o("code",null,"/etc/resolv.conf"),c(" 中的配置。")]),o("p",null,[o("a",{href:"https://kubernetes.io/zh-cn/docs/tasks/administer-cluster/dns-debugging-resolution/",target:"_blank",rel:"noopener"},"DNS debug")]),o("h2",{id:"reset-network"},[o("a",{class:"header-anchor",href:"#reset-network","aria-hidden":"true"},"#"),c(" reset network")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("kubeadm reset\nsystemctl stop kubelet\nsystemctl stop docker\n"),o("span",{class:"token function"},"rm"),c(" -rf /var/lib/cni/\n"),o("span",{class:"token function"},"rm"),c(" -rf /var/lib/kubelet/*\n"),o("span",{class:"token function"},"rm"),c(" -rf /etc/cni/\n"),o("span",{class:"token function"},"ifconfig"),c(" cni0 down\n"),o("span",{class:"token function"},"ifconfig"),c(" flannel.1 down\n"),o("span",{class:"token function"},"ifconfig"),c(" docker0 down\n"),o("span",{class:"token function"},"ip"),c(),o("span",{class:"token function"},"link"),c(" delete cni0\n"),o("span",{class:"token function"},"ip"),c(),o("span",{class:"token function"},"link"),c(" delete flannel.1\nsystemctl start docker\nsystemctl start kubelet\n")])]),o("h2",{id:"查看指定节点上的-pod-情况"},[o("a",{class:"header-anchor",href:"#查看指定节点上的-pod-情况","aria-hidden":"true"},"#"),c(" 查看指定节点上的 pod 情况")]),o("pre",{class:"language-bash"},[o("code",{class:"language-bash"},[c("$ kubectl get pods --all-namespaces --field-selector spec.nodeName"),o("span",{class:"token operator"},"="),c("your-node-name\n")])])],-1),i={expose:[],setup(o){const c={title:"k8s 安装记录",date:"2023-05-25T00:00:00.000Z",author:"Linkang Chan",twitter:"JessEisen_LJ",description:"k8s",public:!0,tag:"23K05 k8s",meta:[{property:"og:title",content:"k8s 安装记录"},{property:"og:description",content:"k8s"},{name:"description",content:"k8s"}]};return a({title:"k8s 安装记录",meta:[{property:"og:title",content:"k8s 安装记录"},{property:"og:description",content:"k8s"},{name:"description",content:"k8s"}]}),(a,o)=>{const i=n;return s(),e(i,{frontmatter:c},{default:t((()=>[l])),_:1})}}};export default i;
