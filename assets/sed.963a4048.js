import{_ as n}from"./app.449ba84e.js";import{h as s,o as e,a,w as t,b as l,k as o}from"./vendor.80607e96.js";const c=l("div",null,[l("p",null,[l("code",null,"sed"),o(" 作为一个流处理器，在命令行里面必须拥有一袭地位。这个古老却很有魅力的工具拥有着巨大的可能，同时拥有正则的加持，更加是如虎添翼。本文整理了一些大部分的 "),l("code",null,"sed"),o(" 的用法。其他可以查看 ["),l("a",{href:"http://sed.sourceforge.net/sed1line_zh-CN.html",target:"_blank",rel:"noopener"},"sed 单行脚本快速参考"),o("]")]),l("h2",{id:"重定向"},[l("a",{class:"header-anchor",href:"#重定向","aria-hidden":"true"},"#"),o(" 重定向")]),l("p",null,[o("这个重定向和 "),l("code",null,"shell"),o(" 脚本中的不一样，并不是使用 "),l("code",null,">>"),o(" 标志，而是直接通过 "),l("code",null,"w"),o(" 命令。")]),l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},"'w output.txt'"),o(" source.txt\n"),l("span",{class:"token function"},"sed"),o(" -n "),l("span",{class:"token string"},"'/xxx/,$ w output.txt'"),o(" source.txt\n")])]),l("p",null,[o("注意一般是使用 "),l("code",null,"-i"),o(" 选项来强制将原文件修改掉，不要使用 "),l("code",null,"shell"),o(" 的重定向来定向到原文件中。")]),l("hr"),l("h2",{id:"替换命令"},[l("a",{class:"header-anchor",href:"#替换命令","aria-hidden":"true"},"#"),o(" 替换命令")]),l("p",null,[l("code",null,"s"),o(" 可以说是最常用的命令了，不过 "),l("code",null,"s"),o(" 可以接很多个 "),l("code",null,"flag"),o(" 来帮助更好的完成任务，其中有一个 "),l("code",null,"e"),o(" 。它的作用是当有替换发生时，会将 "),l("code",null,"shell"),o(" 命令放到 "),l("code",null,"pattern space"),o(" 中，然后会被执行，执行之后的结果会继续被放到 "),l("code",null,"pattern space"),o(" 中。比如:")]),l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[o("$ "),l("span",{class:"token function"},"cat"),o(" file.txt\na.txt\nb.txt\n$ "),l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},"'s/^/ls -l /e'"),o(" file.txt\n-rw-r--r-- "),l("span",{class:"token number"},"1"),o(" root root "),l("span",{class:"token number"},"1627"),o(" Oct "),l("span",{class:"token number"},"14"),o(),l("span",{class:"token number"},"14"),o(":30 a.txt\n-rw-r--r-- "),l("span",{class:"token number"},"1"),o(" root root "),l("span",{class:"token number"},"807"),o(" Oct "),l("span",{class:"token number"},"14"),o(),l("span",{class:"token number"},"14"),o(":30 b.txt\n")])]),l("hr"),l("h2",{id:"转换字符"},[l("a",{class:"header-anchor",href:"#转换字符","aria-hidden":"true"},"#"),o(" 转换字符")]),l("p",null,[o("大多数时候我们可以使用替换命令来实现，但是有 "),l("code",null,"y"),o(" 这个命令我们就可以这样做：")]),l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[o("$ "),l("span",{class:"token function"},"cat"),o(" source.txt\nIt is a Big dog\n$ "),l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},"'y/IB/ib/'"),o(" source.txt\nit is a big dog\n")])]),l("p",null,"替换对应位置上的字符。"),l("hr"),l("h2",{id:"分组"},[l("a",{class:"header-anchor",href:"#分组","aria-hidden":"true"},"#"),o(" 分组")]),l("p",null,[o("使用"),l("code",null,"()"),o(" 进行匹配，使用 "),l("code",null,"\\1 \\2"),o(" 等来引用：")]),l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[o("$ "),l("span",{class:"token builtin class-name"},"echo"),o(),l("span",{class:"token string"},'"aaa:bbb:ccc"'),o(),l("span",{class:"token operator"},"|"),o(),l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},[o("'s/\\(.*\\):\\(.*\\)/"),l("span",{class:"token entity",title:"\\2"},"\\2"),o(":"),l("span",{class:"token entity",title:"\\1"},"\\1"),o("/'")]),o("\nccc:aaa:bbb\n")])]),l("p",null,[o("默认 sed 是贪婪匹配的，所以会一次性匹配到第二个冒号。这边有两个分组，所以可以用 "),l("code",null,"\\1 \\2"),o(" 来引用，上面的命令中将其调换了位置。"),l("strong",null,"sed 是不支持非贪婪模式的，如果非要实现非贪婪则需要结合实际情况 trick 一下"),o("。 此外大多时候推荐使用 perl 来做，但是 perl 用的人也不是很多。Google it！")]),l("hr"),l("h2",{id:"匹配-html-标签"},[l("a",{class:"header-anchor",href:"#匹配-html-标签","aria-hidden":"true"},"#"),o(" 匹配 HTML 标签")]),l("p",null,[o("HTML/XML 的标签都有一定的规律，都是包裹在 "),l("code",null,"<>"),o(" 之中。 可以使用如下的方式操作：")]),l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[o("$ "),l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},"'s/\\(<[^>]*>\\).*//'"),o(" test.html   "),l("span",{class:"token comment"},"# 匹配出前面的 html 标签"),o("\n$ "),l("span",{class:"token function"},"sed"),o(" -n "),l("span",{class:"token string"},"'s/<[^>]*>//gp'"),o(" test.html  "),l("span",{class:"token comment"},"# 获取最内部的标签的内容"),o("\n")])]),l("hr"),l("h2",{id:"去除空行"},[l("a",{class:"header-anchor",href:"#去除空行","aria-hidden":"true"},"#"),o(" 去除空行")]),l("p",null,"当我们期望去除文件中的空行， 可以有如下的几个方式"),l("pre",{class:"language-bash"},[l("code",{class:"language-bash"},[l("span",{class:"token comment"},"## 去除所有的空行，包括当前行里面有空白字符的情形。"),o("\n$ "),l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},"'/^[[:space:]]*$/d'"),o(" filename\n\n"),l("span",{class:"token comment"},"## 适用于 GNU Sed 的场景下"),o("\n$ "),l("span",{class:"token function"},"sed"),o(),l("span",{class:"token string"},"'/^\\s*$/d'"),o(" filename\n$ "),l("span",{class:"token function"},"sed"),o(" -n "),l("span",{class:"token string"},"'/^\\s*$/!p'"),o(" filename\n")])])],-1),r={expose:[],setup(l){const o={title:"Sed In Action",date:"2019-10-28T00:00:00.000Z",author:"Linkang Chan",twitter:"JessEisen_LJ",description:"sed skill",public:!0,tag:"20Q01 sed",meta:[{property:"og:title",content:"Sed In Action"},{property:"og:description",content:"sed skill"},{name:"description",content:"sed skill"}]};return s({title:"Sed In Action",meta:[{property:"og:title",content:"Sed In Action"},{property:"og:description",content:"sed skill"},{name:"description",content:"sed skill"}]}),(s,l)=>{const r=n;return e(),a(r,{frontmatter:o},{default:t((()=>[c])),_:1})}}};export default r;
