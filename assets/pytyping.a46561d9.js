import{_ as n}from"./ShortHR.090ec3c7.js";import{_ as a}from"./app.252c1e4c.js";import{h as s,o as t,a as o,w as e,b as c,k as p}from"./vendor.80607e96.js";const l=c("p",null,"本文记录在 Python 中 Typing 库提供的一些功能，以此来更好的定义日常开发中的类型，当有类型时，我们可以更好的知道某些 API 的输入输出的类型，利人利己。",-1),u=c("h3",{id:"type-aliases"},[c("a",{class:"header-anchor",href:"#type-aliases","aria-hidden":"true"},"#"),p(" Type Aliases")],-1),i=c("blockquote",null,[c("p",null,"new in v3.10")],-1),r=c("p",null,[p("在 Python 中某些类型会比较复杂，我们可以对其做一个类型别名, 起到简化的作用。 同时在创建这样的一个别名的同时，我们可以对这个新的别名设置类型 "),c("code",null,"TypeAlias")],-1),k=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"from"),p(" typing "),c("span",{class:"token keyword"},"import"),p(" TypeAlias\n\nVector"),c("span",{class:"token punctuation"},":"),p(" TypeAlias "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token builtin"},"list"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"float"),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),d=c("h3",{id:"newtype"},[c("a",{class:"header-anchor",href:"#newtype","aria-hidden":"true"},"#"),p(" NewType")],-1),h=c("p",null,[p("顾名思义，这会创建一个新的类型，同时支持从这新的类型创建另外一个新的类型，"),c("strong",null,"不过不支持将这个类型作为类的父类。")],-1),y=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"from"),p(" typing "),c("span",{class:"token keyword"},"import"),p(" NewType\n\nBookId "),c("span",{class:"token operator"},"="),p(" NewType"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'BookId'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},")"),p("\nbook_id "),c("span",{class:"token operator"},"="),p(" BookId"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1234"),c("span",{class:"token punctuation"},")"),p("\n\n"),c("span",{class:"token builtin"},"type"),c("span",{class:"token punctuation"},"("),p("book_id"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# <class 'int'>"),p("\n\nnew_book_id "),c("span",{class:"token operator"},"="),p(" BookId"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"+"),p(" BookId"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"2"),c("span",{class:"token punctuation"},")"),p("\n"),c("span",{class:"token comment"},"# new_book_id type is int, not BookId"),p("\n")])],-1),g=c("p",null,"当我们定义了新的类型后，如果入参和期望的类型不一致时，会有 warning，但是不影响 runtime。",-1),b=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"query_book_info"),c("span",{class:"token punctuation"},"("),p("book_id"),c("span",{class:"token punctuation"},":"),p(" BookId"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token builtin"},"dict"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),p("\n\nbook_id "),c("span",{class:"token operator"},"="),p(" BookId"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1234"),c("span",{class:"token punctuation"},")"),p("\n_ "),c("span",{class:"token operator"},"="),p(" query_book_info"),c("span",{class:"token punctuation"},"("),p("book_id"),c("span",{class:"token punctuation"},")"),p("  "),c("span",{class:"token comment"},"# static type checker feels good"),p("\n_ "),c("span",{class:"token operator"},"="),p(" query_book_info"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1234"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# static type checker complain about the type int not BookId"),p("\n")])],-1),m=c("p",null,"另外一些注意",-1),f=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[p("\nSubBookId "),c("span",{class:"token operator"},"="),p(" NewType"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'SubBookId'"),c("span",{class:"token punctuation"},","),p(" BookId"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# correct"),p("\n\n_ "),c("span",{class:"token operator"},"="),p(" query_book_info"),c("span",{class:"token punctuation"},"("),p("SubBookId"),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"123"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# static type still complain about that"),p("\n\n"),c("span",{class:"token comment"},"# 不可作为继承使用"),p("\n"),c("span",{class:"token keyword"},"class"),p(),c("span",{class:"token class-name"},"SubBookId"),c("span",{class:"token punctuation"},"("),p("BookId"),c("span",{class:"token punctuation"},")"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token comment"},"# invalid !"),p("\n    "),c("span",{class:"token keyword"},"pass"),p("\n")])],-1),w=c("h3",{id:"callable"},[c("a",{class:"header-anchor",href:"#callable","aria-hidden":"true"},"#"),p(" Callable")],-1),_=c("p",null,[p("基本结构为 "),c("code",null,"Callable[[Arg1Type, Arg2Type], ReturnType]")],-1),T=c("h3",{id:"generics"},[c("a",{class:"header-anchor",href:"#generics","aria-hidden":"true"},"#"),p(" Generics")],-1),S=c("p",null,"Python 中范型的定义比较简单，比如：",-1),v=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"from"),p(" collections"),c("span",{class:"token punctuation"},"."),p("abc "),c("span",{class:"token keyword"},"import"),p(" Sequence\n"),c("span",{class:"token keyword"},"from"),p(" typing "),c("span",{class:"token keyword"},"import"),p(" TypeVar\n\nT "),c("span",{class:"token operator"},"="),p(" TypeVar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'T'"),c("span",{class:"token punctuation"},")"),p("\n\n"),c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"first"),c("span",{class:"token punctuation"},"("),p("l"),c("span",{class:"token punctuation"},":"),p(" Sequence"),c("span",{class:"token punctuation"},"["),p("T"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(" T"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),p("\n")])],-1),I=c("h3",{id:"annotating-tuples"},[c("a",{class:"header-anchor",href:"#annotating-tuples","aria-hidden":"true"},"#"),p(" Annotating tuples")],-1),N=c("p",null,"正常我们在定义 list 等容器类型时，只能定义一种类型，如果我们的数据里面有不同的类型，这个时候就可以使用 annotating tuples 的类型了",-1),P=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[p("x"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"list"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token punctuation"},"]"),p("\n\nx"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"tuple"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token punctuation"},"("),c("span",{class:"token number"},"1"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'foo'"),c("span",{class:"token punctuation"},")"),p("  "),c("span",{class:"token comment"},"# 可以是不同的类型的结果"),p("\n\nx"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"tuple"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"]"),p("  "),c("span",{class:"token comment"},"# 表示 x 可是任意长度的 int 类型"),p("\n")])],-1),C=c("h2",{id:"typing-module-content"},[c("a",{class:"header-anchor",href:"#typing-module-content","aria-hidden":"true"},"#"),p(" Typing Module Content")],-1),B=c("h3",{id:"anystr"},[c("a",{class:"header-anchor",href:"#anystr","aria-hidden":"true"},"#"),p(" AnyStr")],-1),A=c("p",null,[p("这个类型表示可以接受的参数类型是 "),c("code",null,"str"),p(" 或者 "),c("code",null,"bytes"),p(" 。 但是注意在同时使用多个的时候，需要注意入参要保持一致。比如：")],-1),q=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"show_content"),c("span",{class:"token punctuation"},"("),p("ctx1"),c("span",{class:"token punctuation"},":"),p(" AnyStr"),c("span",{class:"token punctuation"},","),p(" ctx2"),c("span",{class:"token punctuation"},":"),p(" AnyStr"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token boolean"},"None"),p("\n\nshow_content"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"b'abc'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'def'"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# static type checker complain about that, error, cannot mix str and bytes"),p("\n")])],-1),R=c("h3",{id:"literalstring"},[c("a",{class:"header-anchor",href:"#literalstring","aria-hidden":"true"},"#"),p(" LiteralString")],-1),x=c("blockquote",null,[c("p",null,"new in v3.11")],-1),L=c("p",null,[p("所有字符串字面量都是 "),c("code",null,"LiteralString"),p(", 但是 "),c("code",null,"str"),p(" 不是 "),c("code",null,"LiteralString")],-1),U=c("h3",{id:"never"},[c("a",{class:"header-anchor",href:"#never","aria-hidden":"true"},"#"),p(" Never")],-1),V=c("blockquote",null,[c("p",null,"new in v3.11")],-1),j=c("p",null,"通常用来定义永远不会被调用或函数不会返回的那种",-1),E=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"never_call_me"),c("span",{class:"token punctuation"},"("),p("arg"),c("span",{class:"token punctuation"},":"),p(" Never"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token boolean"},"None"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),p("\n\nnever_call_me"),c("span",{class:"token punctuation"},"("),p("_"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# ok"),p("\nnever_call_me"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'abc'"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token comment"},"# type checker error"),p("\n")])],-1),F=c("p",null,[p("在低版本中我们定义无返回可以使用 "),c("code",null,"NoReturn"),p("。")],-1),M=c("h3",{id:"self"},[c("a",{class:"header-anchor",href:"#self","aria-hidden":"true"},"#"),p(" Self")],-1),O=c("blockquote",null,[c("p",null,"new in v3.11")],-1),X=c("p",null,[p("顾名思义，我们可以在 "),c("code",null,"classmethod"),p(" 中使用。")],-1),Z=c("h2",{id:"special-forms"},[c("a",{class:"header-anchor",href:"#special-forms","aria-hidden":"true"},"#"),p(" Special forms")],-1),J=c("h3",{id:"union"},[c("a",{class:"header-anchor",href:"#union","aria-hidden":"true"},"#"),p(" Union")],-1),G=c("p",null,[p("表示可以同时可以接受的类型，在 v3.10 中可以使用 "),c("code",null,"|"),p(" 代替，有几个规则")],-1),H=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[p("Union"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"str"),p(),c("span",{class:"token punctuation"},"]"),p("  "),c("span",{class:"token operator"},"=="),c("span",{class:"token operator"},">"),p(),c("span",{class:"token builtin"},"str"),p("\nUnion"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"float"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"dict"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"=="),c("span",{class:"token operator"},">"),p(" Union"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"float"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token builtin"},"dict"),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),z=c("p",null,[p("为了兼容低版本，可以使用 Union， "),c("code",null,"|"),p(" 在自己的脚本中使用即可。")],-1),D=c("h3",{id:"optional"},[c("a",{class:"header-anchor",href:"#optional","aria-hidden":"true"},"#"),p(" Optional")],-1),K=c("p",null,"可以理解成是 Union[X, None], 不过当参数需要显式的负值为 None 的时候，使用 Optional 比较合适。",-1),Q=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"foo"),c("span",{class:"token punctuation"},"("),p("arg"),c("span",{class:"token punctuation"},":"),p(" Optional"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},"]"),p(),c("span",{class:"token operator"},"="),p(),c("span",{class:"token boolean"},"None"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token boolean"},"None"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),p("\n")])],-1),W=c("h3",{id:"callable-1"},[c("a",{class:"header-anchor",href:"#callable-1","aria-hidden":"true"},"#"),p(" Callable")],-1),Y=c("p",null,[c("code",null,"Callable[InputTypes, ReturnTypes]"),p(" 用来定义函数或者方法的，一般结合 "),c("code",null,"Concatenate"),p(" 和 "),c("code",null,"ParamSpec"),p(" 使用。")],-1),$=c("h3",{id:"concatenate"},[c("a",{class:"header-anchor",href:"#concatenate","aria-hidden":"true"},"#"),p(" Concatenate")],-1),nn=c("blockquote",null,[c("p",null,"new in v3.10")],-1),an=c("p",null,[p("Concatenate 当前只能用在 Callable 的第一个参数中，一般我们结合 "),c("code",null,"ParamSpec"),p(" 使用。更多的时候是创建一个 decorator 的时候。")],-1),sn=c("p",null,"比如我们函数接受多个参数，其中某个参数是需要明确给出变量定义的，而其他的参数可以被归类成一组，这个时候我们可以这么定义函数的类型",-1),tn=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"my_func"),c("span",{class:"token punctuation"},"("),p("arg1"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(" arg2"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},","),p(" arg3"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"dict"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),p("\n\n可以通过如下的方式定义这个函数的类型\n\nP "),c("span",{class:"token operator"},"="),p(" ParamSpec"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'P'"),c("span",{class:"token punctuation"},")"),p("\nR "),c("span",{class:"token operator"},"="),p(" TypeVar"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'R'"),c("span",{class:"token punctuation"},")"),p("\n\nCallable"),c("span",{class:"token punctuation"},"["),p("Concatenate"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(" P"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(" R"),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),on=c("p",null,"现在我们可以这样定义个 decorator",-1),en=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[p("\n"),c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"my_dec"),c("span",{class:"token punctuation"},"("),p("f"),c("span",{class:"token punctuation"},":"),p(" Callable"),c("span",{class:"token punctuation"},"["),p("Concatenate"),c("span",{class:"token punctuation"},"["),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(" P"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},","),p(" R"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(" Callable"),c("span",{class:"token punctuation"},"["),p("P"),c("span",{class:"token punctuation"},","),p(" R"),c("span",{class:"token punctuation"},"]"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"inner"),c("span",{class:"token punctuation"},"("),c("span",{class:"token operator"},"*"),p("args"),c("span",{class:"token punctuation"},":"),p(" P"),c("span",{class:"token punctuation"},"."),p("args"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"**"),p("kwargs"),c("span",{class:"token punctuation"},":"),p(" P"),c("span",{class:"token punctuation"},"."),p("kwargs"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(" R"),c("span",{class:"token punctuation"},":"),p("\n        "),c("span",{class:"token keyword"},"return"),p(" f"),c("span",{class:"token punctuation"},"("),c("span",{class:"token string"},"'hello'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"*"),p("args"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token operator"},"**"),p("kwargs"),c("span",{class:"token punctuation"},")"),p("\n    "),c("span",{class:"token keyword"},"return"),p(" inner\n\n\n"),c("span",{class:"token decorator annotation punctuation"},"@my_dec"),p("\n"),c("span",{class:"token keyword"},"def"),p(),c("span",{class:"token function"},"my_func"),c("span",{class:"token punctuation"},"("),p("arg1"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"str"),c("span",{class:"token punctuation"},","),p(" arg2"),c("span",{class:"token punctuation"},":"),p(),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},","),p(" arg3"),c("span",{class:"token punctuation"},":"),c("span",{class:"token builtin"},"dict"),c("span",{class:"token punctuation"},")"),p(),c("span",{class:"token operator"},"-"),c("span",{class:"token operator"},">"),p(),c("span",{class:"token builtin"},"int"),c("span",{class:"token punctuation"},":"),p("\n    "),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),c("span",{class:"token punctuation"},"."),p("\n\n"),c("span",{class:"token comment"},"# arg1 is pass in  decorator"),p("\nmy_func"),c("span",{class:"token punctuation"},"("),p("arg2"),c("span",{class:"token punctuation"},","),p(" arg3"),c("span",{class:"token punctuation"},")"),p("\n")])],-1),cn=c("h3",{id:"literial"},[c("a",{class:"header-anchor",href:"#literial","aria-hidden":"true"},"#"),p(" Literial")],-1),pn=c("p",null,"正常情况下来表示该参数是一组字面量，且是定义中提供的字面量。 一般类型检查器会对其做校验。",-1),ln=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[p("mode "),c("span",{class:"token operator"},"="),p(" Literial"),c("span",{class:"token punctuation"},"["),c("span",{class:"token string"},"'r'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'rb'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'w'"),c("span",{class:"token punctuation"},","),p(),c("span",{class:"token string"},"'wb'"),c("span",{class:"token punctuation"},"]"),p("\n")])],-1),un=c("h3",{id:"classvar"},[c("a",{class:"header-anchor",href:"#classvar","aria-hidden":"true"},"#"),p(" ClassVar")],-1),rn=c("p",null,[p("顾名思义，用于标记 class variable，可以在 "),c("code",null,"dataclasses"),p(" 中使用。")],-1),kn=c("h3",{id:"final"},[c("a",{class:"header-anchor",href:"#final","aria-hidden":"true"},"#"),p(" Final")],-1),dn=c("p",null,"通过 Final 标记的变量在任何时候都不能被赋值(runtime时不影响)。",-1),hn=c("pre",{class:"language-python"},[c("code",{class:"language-python"},[p("MAX_SIZE"),c("span",{class:"token punctuation"},":"),p(" Final "),c("span",{class:"token operator"},"="),p(),c("span",{class:"token number"},"9000"),p("\nMAX_SIZE "),c("span",{class:"token operator"},"+="),p(),c("span",{class:"token number"},"1"),p(),c("span",{class:"token comment"},"# tpye checker report error"),p("\n")])],-1),yn={expose:[],setup(p){const yn={title:"Python Typing Notes",date:"2023-07-01T00:00:00.000Z",author:"Linkang Chan",twitter:"JessEisen_LJ",description:"python typing library documentation read record",public:!0,tag:"23N00 py-typing",meta:[{property:"og:title",content:"Python Typing Notes"},{property:"og:description",content:"python typing library documentation read record"},{name:"description",content:"python typing library documentation read record"}]};return s({title:"Python Typing Notes",meta:[{property:"og:title",content:"Python Typing Notes"},{property:"og:description",content:"python typing library documentation read record"},{name:"description",content:"python typing library documentation read record"}]}),(s,p)=>{const gn=n,bn=a;return t(),o(bn,{frontmatter:yn},{default:e((()=>[c("div",null,[l,u,i,r,k,d,h,y,g,b,m,f,w,_,T,S,v,I,N,P,C,B,A,q,R,x,L,U,V,j,E,F,M,O,X,c(gn),Z,J,G,H,z,D,K,Q,W,Y,$,nn,an,sn,tn,on,en,cn,pn,ln,un,rn,kn,dn,hn])])),_:1})}}};export default yn;
