import{l as e,f as t,A as d}from"./framework.ab59a038.js";const a='{"title":"20Q01","description":"","frontmatter":{"title":"20Q01","subtitle":"Sed One Line","date":"2019-10-28T00:00:00.000Z","category":"sed"},"headers":[{"level":2,"title":"重定向","slug":"重定向"},{"level":2,"title":"替换命令","slug":"替换命令"},{"level":2,"title":"转换字符","slug":"转换字符"},{"level":2,"title":"分组","slug":"分组"},{"level":2,"title":"匹配 HTML 标签","slug":"匹配-html-标签"}],"relativePath":"daily/20Q01.md","lastUpdated":1611330866662}',o={},r=d('<p><div class="table-of-contents"><ul><li><a href="#重定向">重定向</a></li><li><a href="#替换命令">替换命令</a></li><li><a href="#转换字符">转换字符</a></li><li><a href="#分组">分组</a></li><li><a href="#匹配-html-标签">匹配 HTML 标签</a></li></ul></div></p><hr><p><code>sed</code> 作为一个流处理器，在命令行里面必须拥有一袭地位。这个古老却很有魅力的工具拥有着巨大的可能，同时拥有正则的加持，更加是如虎添翼。本文整理了一些大部分的 <code>sed</code> 的用法。其他可以查看 [<a href="http://sed.sourceforge.net/sed1line_zh-CN.html" target="_blank" rel="noopener noreferrer">sed 单行脚本快速参考</a>]</p><h2 id="重定向"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h2><p>这个重定向和 <code>shell</code> 脚本中的不一样，并不是使用 <code>&gt;&gt;</code> 标志，而是直接通过 <code>w</code> 命令。</p><div class="language-"><pre><code>sed &#39;w output.txt&#39; source.txt\nsed -n &#39;/xxx/,$ w output.txt&#39; source.txt\n</code></pre></div><p>注意一般是使用 <code>-i</code> 选项来强制将原文件修改掉，不要使用 <code>shell</code> 的重定向来定向到原文件中。</p><hr><h2 id="替换命令"><a class="header-anchor" href="#替换命令" aria-hidden="true">#</a> 替换命令</h2><p><code>s</code> 可以说是最常用的命令了，不过 <code>s</code> 可以接很多个 <code>flag</code> 来帮助更好的完成任务，其中有一个 <code>e</code> 。它的作用是当有替换发生时，会将 <code>shell</code> 命令放到 <code>pattern space</code> 中，然后会被执行，执行之后的结果会继续被放到 <code>pattern space</code> 中。比如:</p><div class="language-"><pre><code>$ cat file.txt\na.txt\nb.txt\n$ sed &#39;s/^/ls -l /e&#39; file.txt\n-rw-r--r-- 1 root root 1627 Oct 14 14:30 a.txt\n-rw-r--r-- 1 root root 807 Oct 14 14:30 b.txt\n</code></pre></div><hr><h2 id="转换字符"><a class="header-anchor" href="#转换字符" aria-hidden="true">#</a> 转换字符</h2><p>大多数时候我们可以使用替换命令来实现，但是有 <code>y</code> 这个命令我们就可以这样做：</p><div class="language-"><pre><code>$ cat source.txt\nIt is a Big dog\n$ sed &#39;y/IB/ib/&#39; source.txt\nit is a big dog\n</code></pre></div><p>替换对应位置上的字符。</p><hr><h2 id="分组"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h2><p>使用<code>()</code> 进行匹配，使用 <code>\\1 \\2</code> 等来引用：</p><div class="language-"><pre><code>$ echo &quot;aaa:bbb:ccc&quot; | sed &#39;s/\\(.*\\):\\(.*\\)/\\2:\\1/&#39;\nccc:aaa:bbb\n</code></pre></div><p>默认 sed 是贪婪匹配的，所以会一次性匹配到第二个冒号。这边有两个分组，所以可以用 <code>\\1 \\2</code> 来引用，上面的命令中将其调换了位置。<strong>sed 是不支持非贪婪模式的，如果非要实现非贪婪则需要结合实际情况 trick 一下</strong>。 此外大多时候推荐使用 perl 来做，但是 perl 用的人也不是很多。Google it！</p><hr><h2 id="匹配-html-标签"><a class="header-anchor" href="#匹配-html-标签" aria-hidden="true">#</a> 匹配 HTML 标签</h2><p>HTML/XML 的标签都有一定的规律，都是包裹在 <code>&lt;&gt;</code> 之中。 可以使用如下的方式操作：</p><div class="language-"><pre><code>$ sed &#39;s/\\(&lt;[^&gt;]*&gt;\\).*//&#39; test.html   # 匹配出前面的 html 标签\n$ sed -n &#39;s/&lt;[^&gt;]*&gt;//gp&#39; test.html  # 获取最内部的标签的内容\n</code></pre></div>',25);o.render=function(d,a,o,c,l,s){return e(),t("div",null,[r])};export default o;export{a as __pageData};
