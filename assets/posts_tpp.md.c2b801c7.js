import{l as e,f as a,A as r}from"./framework.ab59a038.js";const t='{"title":"The Pragmatic Programmer","description":"","frontmatter":{"title":"The Pragmatic Programmer","date":"2021-02-21T00:00:00.000Z","author":"Chan"},"headers":[{"level":2,"title":"First, Do no Harm","slug":"first-do-no-harm"},{"level":2,"title":"交流","slug":"交流"},{"level":2,"title":"ETC(Easier To change)","slug":"etc-easier-to-change"}],"relativePath":"posts/tpp.md","lastUpdated":1613905874690}',i={},l=r('<h2 id="first-do-no-harm"><a class="header-anchor" href="#first-do-no-harm" aria-hidden="true">#</a> First, Do no Harm</h2><p>当软件中有“破窗”(糟糕的设计，错误的决定，低劣的代码)时，不要放任不管。同样如果所在团队的代码很规范，同样要做到保持一致，千万不要成为第一个打破窗户的人。 <p class="explain">现实中往往难做到这样，很多情况下时间紧，会选择苟且的完成任务，当系统庞大后，只能是重写，维护已经很难了。</p></p><h2 id="交流"><a class="header-anchor" href="#交流" aria-hidden="true">#</a> 交流</h2><p>根据听众调整你的表达方式，有些人想要一份只含事实的简报，另外一些人喜欢在谈正事前高谈阔论一番。…… 不过，还是要记住，相互沟通这件事你占了其中的一半，如果有人想让你用一段话谈谈某件事，而你发现那不是三两句就讲的清楚的，那么如实告知，记住，这样的反馈也是一种交流方式。 <p class="explain">在谈论前尽量梳理好自己思路，避免由于自己的误解，让整个谈论走向错误的方向。</p></p><p>想法很重要，但听众还希望有个好看的包装。太多的开发人员在编写书面问的那个时只关注内容，我们认为这不对。随便一个厨师都会告诉你，仅仅是糟糕的外观就能毁掉你在厨房埋头苦干几个小时的成果。…… 看看软件包里的实例文档，学习一下样式和布局。 <p class="explain">确实一个结构清晰，排版舒服的文档会让人更愿意读下去。尤其是技术文档，如果没有一个好的排版，很容易因为排版的错误，导致读者理解成其他的意思，如果是涉及到代码命令的时候，排版不佳的命令行对于小白而言，直接 copy-execute 可能会造成灾难性的后果。</p></p><hr><h2 id="etc-easier-to-change"><a class="header-anchor" href="#etc-easier-to-change" aria-hidden="true">#</a> ETC(Easier To change)</h2><ul><li>为什么解耦很好？ 因为通过隔离关注焦点，可让每一部分都容易变更</li><li>为什么单一职责原则很有用？因为一个需求变化体现为某个单一模块上的一个对应变化</li><li>为什么命名很重要？因为好的命名可以使代码更容易阅读，而你需要通过阅读来变更代码</li></ul><p>上面这三点都可以称之为 ETC。 <strong>ETC 是一种价值观念，不是一条规则。</strong></p>',9);i.render=function(r,t,i,s,o,h){return e(),a("div",null,[l])};export default i;export{t as __pageData};
